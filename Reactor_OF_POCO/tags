!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABSTRACT_OBSERVER_H	AbstractObserver.h	2;"	d
AFLT	SocketAddress.cc	/^struct AFLT {$/;"	s	file:
AFLT::operator ()	SocketAddress.cc	/^  bool operator() (const IPAddress& a1, const IPAddress& a2) {$/;"	f	struct:AFLT	access:public	signature:(const IPAddress& a1, const IPAddress& a2)
AUTOPTR_H	AutoPtr.h	2;"	d
AbstractObserver	AbstractObserver.cc	/^AbstractObserver::AbstractObserver($/;"	f	class:AbstractObserver	signature:( const AbstractObserver& observer)
AbstractObserver	AbstractObserver.cc	/^AbstractObserver::AbstractObserver() {$/;"	f	class:AbstractObserver	signature:()
AbstractObserver	AbstractObserver.h	/^  AbstractObserver();$/;"	p	class:AbstractObserver	access:public	signature:()
AbstractObserver	AbstractObserver.h	/^  AbstractObserver(const AbstractObserver&);$/;"	p	class:AbstractObserver	access:public	signature:(const AbstractObserver&)
AbstractObserver	AbstractObserver.h	/^class AbstractObserver {$/;"	c
AbstractObserver::AbstractObserver	AbstractObserver.cc	/^AbstractObserver::AbstractObserver($/;"	f	class:AbstractObserver	signature:( const AbstractObserver& observer)
AbstractObserver::AbstractObserver	AbstractObserver.cc	/^AbstractObserver::AbstractObserver() {$/;"	f	class:AbstractObserver	signature:()
AbstractObserver::AbstractObserver	AbstractObserver.h	/^  AbstractObserver();$/;"	p	class:AbstractObserver	access:public	signature:()
AbstractObserver::AbstractObserver	AbstractObserver.h	/^  AbstractObserver(const AbstractObserver&);$/;"	p	class:AbstractObserver	access:public	signature:(const AbstractObserver&)
AbstractObserver::accepts	AbstractObserver.h	/^  virtual bool accepts(Notification* pNf) const = 0;$/;"	p	class:AbstractObserver	access:public	signature:(Notification* pNf) const
AbstractObserver::clone	AbstractObserver.h	/^  virtual AbstractObserver* clone() const = 0;$/;"	p	class:AbstractObserver	access:public	signature:() const
AbstractObserver::disable	AbstractObserver.h	/^  virtual void disable() = 0;$/;"	p	class:AbstractObserver	access:public	signature:()
AbstractObserver::equals	AbstractObserver.h	/^  virtual bool equals(const AbstractObserver& observer) const = 0;$/;"	p	class:AbstractObserver	access:public	signature:(const AbstractObserver& observer) const
AbstractObserver::notify	AbstractObserver.h	/^  virtual void notify(Notification* pNf) const = 0;$/;"	p	class:AbstractObserver	access:public	signature:(Notification* pNf) const
AbstractObserver::operator =	AbstractObserver.cc	/^AbstractObserver& AbstractObserver::operator= ($/;"	f	class:AbstractObserver	signature:( const AbstractObserver& observer)
AbstractObserver::operator =	AbstractObserver.h	/^  AbstractObserver& operator= (const AbstractObserver& observer);$/;"	p	class:AbstractObserver	access:public	signature:(const AbstractObserver& observer)
AbstractObserver::~AbstractObserver	AbstractObserver.cc	/^AbstractObserver::~AbstractObserver() {$/;"	f	class:AbstractObserver	signature:()
AbstractObserver::~AbstractObserver	AbstractObserver.h	/^  virtual ~AbstractObserver();$/;"	p	class:AbstractObserver	access:public	signature:()
AbstractObserverPtr	NotificationCenter.h	/^  typedef SharedPtr<AbstractObserver> AbstractObserverPtr;$/;"	t	class:NotificationCenter	access:private
AutoPtr	AutoPtr.h	/^  AutoPtr() : ptr_(0) {$/;"	f	class:AutoPtr	access:public	signature:()
AutoPtr	AutoPtr.h	/^  AutoPtr(C* ptr) : ptr_(ptr) {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr)
AutoPtr	AutoPtr.h	/^  AutoPtr(C* ptr, bool shared) : ptr_(ptr) {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr, bool shared)
AutoPtr	AutoPtr.h	/^  AutoPtr(const AutoPtr& ptr) : ptr_(ptr.ptr_) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr)
AutoPtr	AutoPtr.h	/^  AutoPtr(const AutoPtr<Other>& ptr) : ptr_(const_cast<Other*>((ptr.get()))) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr<Other>& ptr)
AutoPtr	AutoPtr.h	/^class AutoPtr {$/;"	c
AutoPtr::AutoPtr	AutoPtr.h	/^  AutoPtr() : ptr_(0) {$/;"	f	class:AutoPtr	access:public	signature:()
AutoPtr::AutoPtr	AutoPtr.h	/^  AutoPtr(C* ptr) : ptr_(ptr) {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr)
AutoPtr::AutoPtr	AutoPtr.h	/^  AutoPtr(C* ptr, bool shared) : ptr_(ptr) {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr, bool shared)
AutoPtr::AutoPtr	AutoPtr.h	/^  AutoPtr(const AutoPtr& ptr) : ptr_(ptr.ptr_) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr)
AutoPtr::AutoPtr	AutoPtr.h	/^  AutoPtr(const AutoPtr<Other>& ptr) : ptr_(const_cast<Other*>((ptr.get()))) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr<Other>& ptr)
AutoPtr::assign	AutoPtr.h	/^  AutoPtr& assign(C* ptr) {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr)
AutoPtr::assign	AutoPtr.h	/^  AutoPtr& assign(C* ptr, bool shared) {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr, bool shared)
AutoPtr::assign	AutoPtr.h	/^  AutoPtr& assign(const AutoPtr& ptr) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr)
AutoPtr::assign	AutoPtr.h	/^  AutoPtr& assign(const AutoPtr<Other>& ptr) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr<Other>& ptr)
AutoPtr::cast	AutoPtr.h	/^  AutoPtr<Other> cast()const {$/;"	f	class:AutoPtr	access:public	signature:() const
AutoPtr::duplicate	AutoPtr.h	/^  C* duplicate() {$/;"	f	class:AutoPtr	access:public	signature:()
AutoPtr::get	AutoPtr.h	/^  C* get() {$/;"	f	class:AutoPtr	access:public	signature:()
AutoPtr::get	AutoPtr.h	/^  const C* get() const {$/;"	f	class:AutoPtr	access:public	signature:() const
AutoPtr::isNull	AutoPtr.h	/^  bool isNull() const {$/;"	f	class:AutoPtr	access:public	signature:() const
AutoPtr::operator !	AutoPtr.h	/^  bool operator! () const {$/;"	f	class:AutoPtr	access:public	signature:() const
AutoPtr::operator !=	AutoPtr.h	/^  bool operator != (C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
AutoPtr::operator !=	AutoPtr.h	/^  bool operator != (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
AutoPtr::operator !=	AutoPtr.h	/^  bool operator != (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
AutoPtr::operator *	AutoPtr.h	/^  C& operator* () {$/;"	f	class:AutoPtr	access:public	signature:()
AutoPtr::operator *	AutoPtr.h	/^  const C& operator*() const {$/;"	f	class:AutoPtr	access:public	signature:() const
AutoPtr::operator ->	AutoPtr.h	/^  C* operator-> () {$/;"	f	class:AutoPtr	access:public	signature:()
AutoPtr::operator ->	AutoPtr.h	/^  const C* operator->() const{$/;"	f	class:AutoPtr	access:public	signature:() const
AutoPtr::operator <	AutoPtr.h	/^  bool operator < (C* ptr)const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
AutoPtr::operator <	AutoPtr.h	/^  bool operator< (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
AutoPtr::operator <	AutoPtr.h	/^  bool operator< (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
AutoPtr::operator <=	AutoPtr.h	/^  bool operator <= (C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
AutoPtr::operator <=	AutoPtr.h	/^  bool operator <= (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
AutoPtr::operator <=	AutoPtr.h	/^  bool operator <= (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
AutoPtr::operator =	AutoPtr.h	/^  AutoPtr& operator= (C* ptr) {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr)
AutoPtr::operator =	AutoPtr.h	/^  AutoPtr& operator= (const AutoPtr& ptr) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr)
AutoPtr::operator =	AutoPtr.h	/^  AutoPtr& operator= (const AutoPtr<Other>& ptr) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr<Other>& ptr)
AutoPtr::operator ==	AutoPtr.h	/^  bool operator == (C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
AutoPtr::operator ==	AutoPtr.h	/^  bool operator == (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
AutoPtr::operator ==	AutoPtr.h	/^  bool operator== (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
AutoPtr::operator >	AutoPtr.h	/^  bool operator > (C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
AutoPtr::operator >	AutoPtr.h	/^  bool operator > (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
AutoPtr::operator >	AutoPtr.h	/^  bool operator > (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
AutoPtr::operator >=	AutoPtr.h	/^  bool operator >= (C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
AutoPtr::operator >=	AutoPtr.h	/^  bool operator >= (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
AutoPtr::operator >=	AutoPtr.h	/^  bool operator >= (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
AutoPtr::operator C*	AutoPtr.h	/^  operator C*() {$/;"	f	class:AutoPtr	access:public	signature:()
AutoPtr::operator const C*	AutoPtr.h	/^  operator const C*() const {$/;"	f	class:AutoPtr	access:public	signature:() const
AutoPtr::ptr_	AutoPtr.h	/^  C* ptr_;$/;"	m	class:AutoPtr	access:private
AutoPtr::swap	AutoPtr.h	/^  void swap(AutoPtr& ptr) {$/;"	f	class:AutoPtr	access:public	signature:(AutoPtr& ptr)
AutoPtr::unsafeCase	AutoPtr.h	/^  AutoPtr<Other> unsafeCase() const {$/;"	f	class:AutoPtr	access:public	signature:() const
AutoPtr::~AutoPtr	AutoPtr.h	/^  ~AutoPtr() {$/;"	f	class:AutoPtr	access:public	signature:()
Callback	Observer.h	/^  typedef void (C::*Callback)(N*);$/;"	t	class:Observer	access:public
DAYS	Timespan.cc	/^const Timespan::TimeDiff Timespan::DAYS =$/;"	m	class:Timespan	file:
DAYS	Timespan.h	/^  static const TimeDiff DAYS;$/;"	m	class:Timespan	access:public
DECLARE_EXCEPTION	Exception.h	73;"	d
DECLARE_EXCEPTION_CODE	Exception.h	57;"	d
EXCEPTION_H	Exception.h	2;"	d
ErrorNotification	SocketNotification.cc	/^ErrorNotification::ErrorNotification( $/;"	f	class:ErrorNotification	signature:( SocketReactor* pReactor)
ErrorNotification	SocketNotification.h	/^  ErrorNotification(SocketReactor* pReactor);$/;"	p	class:ErrorNotification	access:public	signature:(SocketReactor* pReactor)
ErrorNotification	SocketNotification.h	/^class  ErrorNotification : public SocketNotification {$/;"	c	inherits:SocketNotification
ErrorNotification::ErrorNotification	SocketNotification.cc	/^ErrorNotification::ErrorNotification( $/;"	f	class:ErrorNotification	signature:( SocketReactor* pReactor)
ErrorNotification::ErrorNotification	SocketNotification.h	/^  ErrorNotification(SocketReactor* pReactor);$/;"	p	class:ErrorNotification	access:public	signature:(SocketReactor* pReactor)
ErrorNotification::~ErrorNotification	SocketNotification.cc	/^ErrorNotification::~ErrorNotification() {$/;"	f	class:ErrorNotification	signature:()
ErrorNotification::~ErrorNotification	SocketNotification.h	/^  ~ErrorNotification();$/;"	p	class:ErrorNotification	access:public	signature:()
Exception	Exception.cc	/^Exception::Exception(const Exception& exc) : std::exception(exc),$/;"	f	class:Exception	signature:(const Exception& exc)
Exception	Exception.cc	/^Exception::Exception(const std::string& msg, int code) : msg_(msg),$/;"	f	class:Exception	signature:(const std::string& msg, int code)
Exception	Exception.cc	/^Exception::Exception(const std::string& msg,$/;"	f	class:Exception	signature:(const std::string& msg, const Exception& nested, int code)
Exception	Exception.cc	/^Exception::Exception(const std::string& msg,$/;"	f	class:Exception	signature:(const std::string& msg, const std::string& arg, int code)
Exception	Exception.cc	/^Exception::Exception(int code) : pNested_(0), code_(code) {$/;"	f	class:Exception	signature:(int code)
Exception	Exception.h	/^  Exception(const Exception& exc);$/;"	p	class:Exception	access:public	signature:(const Exception& exc)
Exception	Exception.h	/^  Exception(const std::string& msg, const Exception& nested, int code = 0);$/;"	p	class:Exception	access:public	signature:(const std::string& msg, const Exception& nested, int code = 0)
Exception	Exception.h	/^  Exception(const std::string& msg, const std::string& arg, int code = 0);$/;"	p	class:Exception	access:public	signature:(const std::string& msg, const std::string& arg, int code = 0)
Exception	Exception.h	/^  Exception(const std::string& msg, int code = 0);$/;"	p	class:Exception	access:public	signature:(const std::string& msg, int code = 0)
Exception	Exception.h	/^  Exception(int code = 0);$/;"	p	class:Exception	access:protected	signature:(int code = 0)
Exception	Exception.h	/^class Exception : public std::exception {$/;"	c	inherits:std::exception
Exception::Exception	Exception.cc	/^Exception::Exception(const Exception& exc) : std::exception(exc),$/;"	f	class:Exception	signature:(const Exception& exc)
Exception::Exception	Exception.cc	/^Exception::Exception(const std::string& msg, int code) : msg_(msg),$/;"	f	class:Exception	signature:(const std::string& msg, int code)
Exception::Exception	Exception.cc	/^Exception::Exception(const std::string& msg,$/;"	f	class:Exception	signature:(const std::string& msg, const Exception& nested, int code)
Exception::Exception	Exception.cc	/^Exception::Exception(const std::string& msg,$/;"	f	class:Exception	signature:(const std::string& msg, const std::string& arg, int code)
Exception::Exception	Exception.cc	/^Exception::Exception(int code) : pNested_(0), code_(code) {$/;"	f	class:Exception	signature:(int code)
Exception::Exception	Exception.h	/^  Exception(const Exception& exc);$/;"	p	class:Exception	access:public	signature:(const Exception& exc)
Exception::Exception	Exception.h	/^  Exception(const std::string& msg, const Exception& nested, int code = 0);$/;"	p	class:Exception	access:public	signature:(const std::string& msg, const Exception& nested, int code = 0)
Exception::Exception	Exception.h	/^  Exception(const std::string& msg, const std::string& arg, int code = 0);$/;"	p	class:Exception	access:public	signature:(const std::string& msg, const std::string& arg, int code = 0)
Exception::Exception	Exception.h	/^  Exception(const std::string& msg, int code = 0);$/;"	p	class:Exception	access:public	signature:(const std::string& msg, int code = 0)
Exception::Exception	Exception.h	/^  Exception(int code = 0);$/;"	p	class:Exception	access:protected	signature:(int code = 0)
Exception::className	Exception.cc	/^const char* Exception::className() const throw() {$/;"	f	class:Exception	signature:() const
Exception::className	Exception.h	/^  virtual const char* className() const throw();$/;"	p	class:Exception	access:public	signature:() const
Exception::clone	Exception.cc	/^Exception* Exception::clone() const {$/;"	f	class:Exception	signature:() const
Exception::clone	Exception.h	/^  virtual Exception* clone() const;$/;"	p	class:Exception	access:public	signature:() const
Exception::code	Exception.h	/^  int code() const;$/;"	p	class:Exception	access:public	signature:() const
Exception::code	Exception.h	/^inline int Exception::code() const {$/;"	f	class:Exception	signature:() const
Exception::code_	Exception.h	/^  int code_;$/;"	m	class:Exception	access:private
Exception::displayText	Exception.cc	/^std::string Exception::displayText() const {$/;"	f	class:Exception	signature:() const
Exception::displayText	Exception.h	/^  std::string displayText() const;$/;"	p	class:Exception	access:public	signature:() const
Exception::extenedMessage	Exception.cc	/^void Exception::extenedMessage(const std::string& arg) {$/;"	f	class:Exception	signature:(const std::string& arg)
Exception::extenedMessage	Exception.h	/^  void extenedMessage(const std::string& arg);$/;"	p	class:Exception	access:protected	signature:(const std::string& arg)
Exception::message	Exception.h	/^  const std::string& message() const;$/;"	p	class:Exception	access:public	signature:() const
Exception::message	Exception.h	/^  void message(const std::string& msg);$/;"	p	class:Exception	access:protected	signature:(const std::string& msg)
Exception::message	Exception.h	/^inline const std::string& Exception::message() const {$/;"	f	class:Exception	signature:() const
Exception::message	Exception.h	/^inline void Exception::message(const std::string& msg) {$/;"	f	class:Exception	signature:(const std::string& msg)
Exception::msg_	Exception.h	/^  std::string msg_;$/;"	m	class:Exception	access:private
Exception::name	Exception.cc	/^const char* Exception::name() const throw() {$/;"	f	class:Exception	signature:() const
Exception::name	Exception.h	/^  virtual const char* name() const throw();$/;"	p	class:Exception	access:public	signature:() const
Exception::nested	Exception.h	/^  const Exception* nested() const ;$/;"	p	class:Exception	access:public	signature:() const
Exception::nested	Exception.h	/^inline const Exception* Exception::nested() const {$/;"	f	class:Exception	signature:() const
Exception::operator =	Exception.cc	/^Exception& Exception::operator= (const Exception& exc) {$/;"	f	class:Exception	signature:(const Exception& exc)
Exception::operator =	Exception.h	/^  Exception& operator= (const Exception& exc);$/;"	p	class:Exception	access:public	signature:(const Exception& exc)
Exception::pNested_	Exception.h	/^  Exception* pNested_;$/;"	m	class:Exception	access:private
Exception::rethrow	Exception.cc	/^void Exception::rethrow() const {$/;"	f	class:Exception	signature:() const
Exception::rethrow	Exception.h	/^  virtual void rethrow() const;$/;"	p	class:Exception	access:public	signature:() const
Exception::what	Exception.cc	/^const char* Exception::what() const throw(){$/;"	f	class:Exception	signature:() const
Exception::what	Exception.h	/^  virtual const char* what() const throw();$/;"	p	class:Exception	access:public	signature:() const
Exception::~Exception	Exception.cc	/^Exception::~Exception() throw (){$/;"	f	class:Exception	signature:()
Exception::~Exception	Exception.h	/^  ~Exception() throw();$/;"	p	class:Exception	access:public	signature:()
Family	IPAddress.h	/^  enum Family {$/;"	g	class:IPAddress	access:public
HOURS	Timespan.cc	/^const Timespan::TimeDiff Timespan::HOURS = $/;"	m	class:Timespan	file:
HOURS	Timespan.h	/^  static const TimeDiff HOURS;$/;"	m	class:Timespan	access:public
IMPLEMENT_EXCEPTION	Exception.h	74;"	d
IPADDRESS_H	IPAddress.h	2;"	d
IPAddress	IPAddress.cc	/^IPAddress::IPAddress() : pImpl_(new IPv4AddressImpl) {$/;"	f	class:IPAddress	signature:()
IPAddress	IPAddress.cc	/^IPAddress::IPAddress(Family family) {$/;"	f	class:IPAddress	signature:(Family family)
IPAddress	IPAddress.cc	/^IPAddress::IPAddress(const IPAddress& addr) : pImpl_(addr.pImpl_) {$/;"	f	class:IPAddress	signature:(const IPAddress& addr)
IPAddress	IPAddress.cc	/^IPAddress::IPAddress(const std::string& addr) {$/;"	f	class:IPAddress	signature:(const std::string& addr)
IPAddress	IPAddress.cc	/^IPAddress::IPAddress(const void* addr, socklen_t length) {$/;"	f	class:IPAddress	signature:(const void* addr, socklen_t length)
IPAddress	IPAddress.h	/^  IPAddress();$/;"	p	class:IPAddress	access:public	signature:()
IPAddress	IPAddress.h	/^  IPAddress(const IPAddress& addr);$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr)
IPAddress	IPAddress.h	/^  IPAddress(const std::string& addr, Family family);$/;"	p	class:IPAddress	access:public	signature:(const std::string& addr, Family family)
IPAddress	IPAddress.h	/^  IPAddress(const void* addr, socklen_t length);$/;"	p	class:IPAddress	access:public	signature:(const void* addr, socklen_t length)
IPAddress	IPAddress.h	/^  explicit IPAddress(Family family);$/;"	p	class:IPAddress	access:public	signature:(Family family)
IPAddress	IPAddress.h	/^  explicit IPAddress(const std::string& addr);$/;"	p	class:IPAddress	access:public	signature:(const std::string& addr)
IPAddress	IPAddress.h	/^class IPAddress {$/;"	c
IPAddress::Family	IPAddress.h	/^  enum Family {$/;"	g	class:IPAddress	access:public
IPAddress::IPAddress	IPAddress.cc	/^IPAddress::IPAddress() : pImpl_(new IPv4AddressImpl) {$/;"	f	class:IPAddress	signature:()
IPAddress::IPAddress	IPAddress.cc	/^IPAddress::IPAddress(Family family) {$/;"	f	class:IPAddress	signature:(Family family)
IPAddress::IPAddress	IPAddress.cc	/^IPAddress::IPAddress(const IPAddress& addr) : pImpl_(addr.pImpl_) {$/;"	f	class:IPAddress	signature:(const IPAddress& addr)
IPAddress::IPAddress	IPAddress.cc	/^IPAddress::IPAddress(const std::string& addr) {$/;"	f	class:IPAddress	signature:(const std::string& addr)
IPAddress::IPAddress	IPAddress.cc	/^IPAddress::IPAddress(const void* addr, socklen_t length) {$/;"	f	class:IPAddress	signature:(const void* addr, socklen_t length)
IPAddress::IPAddress	IPAddress.h	/^  IPAddress();$/;"	p	class:IPAddress	access:public	signature:()
IPAddress::IPAddress	IPAddress.h	/^  IPAddress(const IPAddress& addr);$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr)
IPAddress::IPAddress	IPAddress.h	/^  IPAddress(const std::string& addr, Family family);$/;"	p	class:IPAddress	access:public	signature:(const std::string& addr, Family family)
IPAddress::IPAddress	IPAddress.h	/^  IPAddress(const void* addr, socklen_t length);$/;"	p	class:IPAddress	access:public	signature:(const void* addr, socklen_t length)
IPAddress::IPAddress	IPAddress.h	/^  explicit IPAddress(Family family);$/;"	p	class:IPAddress	access:public	signature:(Family family)
IPAddress::IPAddress	IPAddress.h	/^  explicit IPAddress(const std::string& addr);$/;"	p	class:IPAddress	access:public	signature:(const std::string& addr)
IPAddress::IPv4	IPAddress.h	/^    IPv4,$/;"	e	enum:IPAddress::Family
IPAddress::IPv6	IPAddress.h	/^    IPv6$/;"	e	enum:IPAddress::Family
IPAddress::MAX_ADDRESS_LEN	IPAddress.h	/^    MAX_ADDRESS_LEN = sizeof(struct in6_addr)$/;"	e	enum:IPAddress::__anon2
IPAddress::addr	IPAddress.cc	/^const void* IPAddress::addr() const {$/;"	f	class:IPAddress	signature:() const
IPAddress::addr	IPAddress.h	/^  const void* addr() const;$/;"	p	class:IPAddress	access:public	signature:() const
IPAddress::af	IPAddress.cc	/^int IPAddress::af() const {$/;"	f	class:IPAddress	signature:() const
IPAddress::af	IPAddress.h	/^  int af() const;$/;"	p	class:IPAddress	access:public	signature:() const
IPAddress::broadcast	IPAddress.cc	/^IPAddress IPAddress::broadcast() {$/;"	f	class:IPAddress	signature:()
IPAddress::broadcast	IPAddress.h	/^  static IPAddress broadcast();$/;"	p	class:IPAddress	access:public	signature:()
IPAddress::family	IPAddress.cc	/^IPAddress::Family IPAddress::family() const {$/;"	f	class:IPAddress	signature:() const
IPAddress::family	IPAddress.h	/^  Family family() const;$/;"	p	class:IPAddress	access:public	signature:() const
IPAddress::init	IPAddress.cc	/^void IPAddress::init(IPAddressImpl* pImpl) {$/;"	f	class:IPAddress	signature:(IPAddressImpl* pImpl)
IPAddress::init	IPAddress.h	/^  void init(IPAddressImpl* pImpl);$/;"	p	class:IPAddress	access:protected	signature:(IPAddressImpl* pImpl)
IPAddress::isBroadCast	IPAddress.cc	/^bool IPAddress::isBroadCast() const {$/;"	f	class:IPAddress	signature:() const
IPAddress::isBroadCast	IPAddress.h	/^  bool isBroadCast() const;$/;"	p	class:IPAddress	access:public	signature:() const
IPAddress::isLoopback	IPAddress.cc	/^bool IPAddress::isLoopback() const {$/;"	f	class:IPAddress	signature:() const
IPAddress::isLoopback	IPAddress.h	/^  bool isLoopback() const;$/;"	p	class:IPAddress	access:public	signature:() const
IPAddress::isMulticast	IPAddress.cc	/^bool IPAddress::isMulticast() const {$/;"	f	class:IPAddress	signature:() const
IPAddress::isMulticast	IPAddress.h	/^  bool isMulticast() const;$/;"	p	class:IPAddress	access:public	signature:() const
IPAddress::isUnicast	IPAddress.cc	/^bool IPAddress::isUnicast() const {$/;"	f	class:IPAddress	signature:() const
IPAddress::isUnicast	IPAddress.h	/^  bool isUnicast() const;$/;"	p	class:IPAddress	access:public	signature:() const
IPAddress::isWildCard	IPAddress.cc	/^bool IPAddress::isWildCard()const {$/;"	f	class:IPAddress	signature:() const
IPAddress::isWildCard	IPAddress.h	/^  bool isWildCard() const;$/;"	p	class:IPAddress	access:public	signature:() const
IPAddress::length	IPAddress.cc	/^socklen_t IPAddress::length() const {$/;"	f	class:IPAddress	signature:() const
IPAddress::length	IPAddress.h	/^  socklen_t length() const;$/;"	p	class:IPAddress	access:public	signature:() const
IPAddress::operator !=	IPAddress.cc	/^bool IPAddress::operator!= (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
IPAddress::operator !=	IPAddress.h	/^  bool operator != (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
IPAddress::operator <	IPAddress.cc	/^bool IPAddress::operator< (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
IPAddress::operator <	IPAddress.h	/^  bool operator <  (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
IPAddress::operator <=	IPAddress.cc	/^bool IPAddress::operator<= (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
IPAddress::operator <=	IPAddress.h	/^  bool operator <= (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
IPAddress::operator =	IPAddress.cc	/^IPAddress& IPAddress::operator= (const IPAddress& addr) {$/;"	f	class:IPAddress	signature:(const IPAddress& addr)
IPAddress::operator =	IPAddress.h	/^  IPAddress& operator= (const IPAddress& addr);$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr)
IPAddress::operator ==	IPAddress.cc	/^bool IPAddress::operator== (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
IPAddress::operator ==	IPAddress.h	/^  bool operator == (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
IPAddress::operator >	IPAddress.cc	/^bool IPAddress::operator> (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
IPAddress::operator >	IPAddress.h	/^  bool operator >  (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
IPAddress::operator >=	IPAddress.cc	/^bool IPAddress::operator>= (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
IPAddress::operator >=	IPAddress.h	/^  bool operator >= (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
IPAddress::pImpl_	IPAddress.h	/^  IPAddressImpl* pImpl_;$/;"	m	class:IPAddress	access:private
IPAddress::parse	IPAddress.cc	/^IPAddress IPAddress::parse(const std::string& addr) {$/;"	f	class:IPAddress	signature:(const std::string& addr)
IPAddress::parse	IPAddress.h	/^  static IPAddress parse(const std::string& addr);$/;"	p	class:IPAddress	access:public	signature:(const std::string& addr)
IPAddress::swap	IPAddress.cc	/^void IPAddress::swap(IPAddress& address) {$/;"	f	class:IPAddress	signature:(IPAddress& address)
IPAddress::swap	IPAddress.h	/^  void swap(IPAddress& addr);$/;"	p	class:IPAddress	access:public	signature:(IPAddress& addr)
IPAddress::toString	IPAddress.cc	/^std::string IPAddress::toString() const {$/;"	f	class:IPAddress	signature:() const
IPAddress::toString	IPAddress.h	/^  std::string toString() const;$/;"	p	class:IPAddress	access:public	signature:() const
IPAddress::tryParse	IPAddress.cc	/^bool IPAddress::tryParse(const std::string& addr, IPAddress& result) {$/;"	f	class:IPAddress	signature:(const std::string& addr, IPAddress& result)
IPAddress::tryParse	IPAddress.h	/^  static bool tryParse(const std::string& addr, IPAddress& result);$/;"	p	class:IPAddress	access:public	signature:(const std::string& addr, IPAddress& result)
IPAddress::wildcard	IPAddress.cc	/^IPAddress IPAddress::wildcard(Family family) {$/;"	f	class:IPAddress	signature:(Family family)
IPAddress::wildcard	IPAddress.h	/^  static IPAddress wildcard(Family family = IPv4);$/;"	p	class:IPAddress	access:public	signature:(Family family = IPv4)
IPAddress::~IPAddress	IPAddress.cc	/^IPAddress::~IPAddress() {$/;"	f	class:IPAddress	signature:()
IPAddress::~IPAddress	IPAddress.h	/^  ~IPAddress();$/;"	p	class:IPAddress	access:public	signature:()
IPAddressImpl	IPAddress.cc	/^  IPAddressImpl() {$/;"	f	class:IPAddressImpl	access:protected	signature:()
IPAddressImpl	IPAddress.cc	/^  IPAddressImpl(const IPAddressImpl&);$/;"	p	class:IPAddressImpl	file:	access:private	signature:(const IPAddressImpl&)
IPAddressImpl	IPAddress.cc	/^class IPAddressImpl : public RefCountedObject {$/;"	c	file:	inherits:RefCountedObject
IPAddressImpl::IPAddressImpl	IPAddress.cc	/^  IPAddressImpl() {$/;"	f	class:IPAddressImpl	access:protected	signature:()
IPAddressImpl::IPAddressImpl	IPAddress.cc	/^  IPAddressImpl(const IPAddressImpl&);$/;"	p	class:IPAddressImpl	file:	access:private	signature:(const IPAddressImpl&)
IPAddressImpl::addr	IPAddress.cc	/^  virtual const void* addr() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
IPAddressImpl::af	IPAddress.cc	/^  virtual int af() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
IPAddressImpl::clone	IPAddress.cc	/^  virtual IPAddressImpl* clone() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
IPAddressImpl::family	IPAddress.cc	/^  virtual IPAddress::Family family() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
IPAddressImpl::isBroadCast	IPAddress.cc	/^  virtual bool isBroadCast() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
IPAddressImpl::isLoopback	IPAddress.cc	/^  virtual bool isLoopback() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
IPAddressImpl::isMulticast	IPAddress.cc	/^  virtual bool isMulticast() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
IPAddressImpl::isWildCard	IPAddress.cc	/^  virtual bool isWildCard() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
IPAddressImpl::length	IPAddress.cc	/^  virtual socklen_t length() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
IPAddressImpl::operator =	IPAddress.cc	/^  IPAddressImpl& operator= (const IPAddressImpl&);$/;"	p	class:IPAddressImpl	file:	access:private	signature:(const IPAddressImpl&)
IPAddressImpl::toString	IPAddress.cc	/^  virtual std::string toString() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
IPAddressImpl::~IPAddressImpl	IPAddress.cc	/^  virtual ~IPAddressImpl() {$/;"	f	class:IPAddressImpl	access:protected	signature:()
IPv4	IPAddress.h	/^    IPv4,$/;"	e	enum:IPAddress::Family
IPv4AddressImpl	IPAddress.cc	/^  IPv4AddressImpl() {$/;"	f	class:IPv4AddressImpl	access:public	signature:()
IPv4AddressImpl	IPAddress.cc	/^  IPv4AddressImpl(const void* addr) {$/;"	f	class:IPv4AddressImpl	access:public	signature:(const void* addr)
IPv4AddressImpl	IPAddress.cc	/^class IPv4AddressImpl : public IPAddressImpl {$/;"	c	file:	inherits:IPAddressImpl
IPv4AddressImpl::IPv4AddressImpl	IPAddress.cc	/^  IPv4AddressImpl() {$/;"	f	class:IPv4AddressImpl	access:public	signature:()
IPv4AddressImpl::IPv4AddressImpl	IPAddress.cc	/^  IPv4AddressImpl(const void* addr) {$/;"	f	class:IPv4AddressImpl	access:public	signature:(const void* addr)
IPv4AddressImpl::addr	IPAddress.cc	/^  const void* addr() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
IPv4AddressImpl::addr_	IPAddress.cc	/^  struct in_addr addr_;$/;"	m	class:IPv4AddressImpl	typeref:struct:IPv4AddressImpl::in_addr	file:	access:private
IPv4AddressImpl::af	IPAddress.cc	/^  int af() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
IPv4AddressImpl::clone	IPAddress.cc	/^  IPAddressImpl* clone() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
IPv4AddressImpl::family	IPAddress.cc	/^  IPAddress::Family family() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
IPv4AddressImpl::isBroadCast	IPAddress.cc	/^  bool isBroadCast() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
IPv4AddressImpl::isLoopback	IPAddress.cc	/^  bool isLoopback() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
IPv4AddressImpl::isMulticast	IPAddress.cc	/^  bool isMulticast() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
IPv4AddressImpl::isWildCard	IPAddress.cc	/^  bool isWildCard() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
IPv4AddressImpl::length	IPAddress.cc	/^  socklen_t length() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
IPv4AddressImpl::parse	IPAddress.cc	/^  static IPv4AddressImpl* parse(const std::string& addr) {$/;"	f	class:IPv4AddressImpl	access:public	signature:(const std::string& addr)
IPv4AddressImpl::toString	IPAddress.cc	/^  std::string toString() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
IPv4SocketAddressImpl	SocketAddress.cc	/^  IPv4SocketAddressImpl() {$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:()
IPv4SocketAddressImpl	SocketAddress.cc	/^  IPv4SocketAddressImpl(const struct sockaddr_in* addr) {$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:(const struct sockaddr_in* addr)
IPv4SocketAddressImpl	SocketAddress.cc	/^  IPv4SocketAddressImpl(const void* addr, uint16_t port) {$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:(const void* addr, uint16_t port)
IPv4SocketAddressImpl	SocketAddress.cc	/^class IPv4SocketAddressImpl : public SocketAddressImpl {$/;"	c	file:	inherits:SocketAddressImpl
IPv4SocketAddressImpl::IPv4SocketAddressImpl	SocketAddress.cc	/^  IPv4SocketAddressImpl() {$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:()
IPv4SocketAddressImpl::IPv4SocketAddressImpl	SocketAddress.cc	/^  IPv4SocketAddressImpl(const struct sockaddr_in* addr) {$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:(const struct sockaddr_in* addr)
IPv4SocketAddressImpl::IPv4SocketAddressImpl	SocketAddress.cc	/^  IPv4SocketAddressImpl(const void* addr, uint16_t port) {$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:(const void* addr, uint16_t port)
IPv4SocketAddressImpl::addr	SocketAddress.cc	/^  const struct sockaddr* addr() const{$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:() const
IPv4SocketAddressImpl::addr_	SocketAddress.cc	/^  struct sockaddr_in addr_;$/;"	m	class:IPv4SocketAddressImpl	typeref:struct:IPv4SocketAddressImpl::sockaddr_in	file:	access:private
IPv4SocketAddressImpl::af	SocketAddress.cc	/^  int af() const{$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:() const
IPv4SocketAddressImpl::host	SocketAddress.cc	/^  IPAddress host() const {$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:() const
IPv4SocketAddressImpl::length	SocketAddress.cc	/^  socklen_t length() const {$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:() const
IPv4SocketAddressImpl::port	SocketAddress.cc	/^  uint16_t port() const{$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:() const
IPv6	IPAddress.h	/^    IPv6$/;"	e	enum:IPAddress::Family
IdleNotification	SocketNotification.cc	/^IdleNotification::IdleNotification($/;"	f	class:IdleNotification	signature:( SocketReactor* pReactor)
IdleNotification	SocketNotification.h	/^  IdleNotification(SocketReactor* pReactor);$/;"	p	class:IdleNotification	access:public	signature:(SocketReactor* pReactor)
IdleNotification	SocketNotification.h	/^class IdleNotification : public SocketNotification {$/;"	c	inherits:SocketNotification
IdleNotification::IdleNotification	SocketNotification.cc	/^IdleNotification::IdleNotification($/;"	f	class:IdleNotification	signature:( SocketReactor* pReactor)
IdleNotification::IdleNotification	SocketNotification.h	/^  IdleNotification(SocketReactor* pReactor);$/;"	p	class:IdleNotification	access:public	signature:(SocketReactor* pReactor)
IdleNotification::~IdleNotification	SocketNotification.cc	/^IdleNotification::~IdleNotification() {$/;"	f	class:IdleNotification	signature:()
IdleNotification::~IdleNotification	SocketNotification.h	/^  ~IdleNotification();$/;"	p	class:IdleNotification	access:public	signature:()
MAX_ADDRESS_LEN	IPAddress.h	/^    MAX_ADDRESS_LEN = sizeof(struct in6_addr)$/;"	e	enum:IPAddress::__anon2
MAX_ADDRESS_LEN	SocketAddress.h	/^    MAX_ADDRESS_LEN = sizeof(struct in6_addr)$/;"	e	enum:SocketAddress::__anon1
MILLISECONDS	Timespan.cc	/^const Timespan::TimeDiff Timespan::MILLISECONDS = 1000;$/;"	m	class:Timespan	file:
MILLISECONDS	Timespan.h	/^  static const TimeDiff MILLISECONDS;$/;"	m	class:Timespan	access:public
MINUTES	Timespan.cc	/^const Timespan::TimeDiff Timespan::MINUTES = $/;"	m	class:Timespan	file:
MINUTES	Timespan.h	/^  static const TimeDiff MINUTES;$/;"	m	class:Timespan	access:public
NOTIFICATION_CENTER_H	NotificationCenter.h	2;"	d
NOTIFICATION_H	Notification.h	2;"	d
Notification	Notification.cc	/^Notification::Notification() {$/;"	f	class:Notification	signature:()
Notification	Notification.h	/^  Notification();$/;"	p	class:Notification	access:public	signature:()
Notification	Notification.h	/^class Notification : public RefCountedObject {$/;"	c	inherits:RefCountedObject
Notification::Notification	Notification.cc	/^Notification::Notification() {$/;"	f	class:Notification	signature:()
Notification::Notification	Notification.h	/^  Notification();$/;"	p	class:Notification	access:public	signature:()
Notification::Ptr	Notification.h	/^  typedef AutoPtr<Notification> Ptr;$/;"	t	class:Notification	access:public
Notification::name	Notification.cc	/^std::string Notification::name() const {$/;"	f	class:Notification	signature:() const
Notification::name	Notification.h	/^  virtual std::string name() const;$/;"	p	class:Notification	access:public	signature:() const
Notification::~Notification	Notification.cc	/^Notification::~Notification() {$/;"	f	class:Notification	signature:()
Notification::~Notification	Notification.h	/^  virtual ~Notification();$/;"	p	class:Notification	access:protected	signature:()
NotificationCenter	NotificationCenter.cc	/^NotificationCenter::NotificationCenter() {$/;"	f	class:NotificationCenter	signature:()
NotificationCenter	NotificationCenter.h	/^  NotificationCenter();$/;"	p	class:NotificationCenter	access:public	signature:()
NotificationCenter	NotificationCenter.h	/^class NotificationCenter {$/;"	c
NotificationCenter::AbstractObserverPtr	NotificationCenter.h	/^  typedef SharedPtr<AbstractObserver> AbstractObserverPtr;$/;"	t	class:NotificationCenter	access:private
NotificationCenter::NotificationCenter	NotificationCenter.cc	/^NotificationCenter::NotificationCenter() {$/;"	f	class:NotificationCenter	signature:()
NotificationCenter::NotificationCenter	NotificationCenter.h	/^  NotificationCenter();$/;"	p	class:NotificationCenter	access:public	signature:()
NotificationCenter::ObserverList	NotificationCenter.h	/^  typedef std::vector<AbstractObserverPtr> ObserverList;$/;"	t	class:NotificationCenter	access:private
NotificationCenter::addObserver	NotificationCenter.cc	/^void NotificationCenter::addObserver(const AbstractObserver& observer) {$/;"	f	class:NotificationCenter	signature:(const AbstractObserver& observer)
NotificationCenter::addObserver	NotificationCenter.h	/^  void addObserver(const AbstractObserver& observer);$/;"	p	class:NotificationCenter	access:public	signature:(const AbstractObserver& observer)
NotificationCenter::countObservers	NotificationCenter.h	/^  std::size_t countObservers() const;$/;"	p	class:NotificationCenter	access:public	signature:() const
NotificationCenter::defaultCenter	NotificationCenter.h	/^  static NotificationCenter& defaultCenter();$/;"	p	class:NotificationCenter	access:public	signature:()
NotificationCenter::hasObservers	NotificationCenter.h	/^  bool hasObservers() const;$/;"	p	class:NotificationCenter	access:public	signature:() const
NotificationCenter::observers_	NotificationCenter.h	/^  ObserverList observers_;$/;"	m	class:NotificationCenter	access:private
NotificationCenter::postNotification	NotificationCenter.cc	/^void NotificationCenter::postNotification(Notification::Ptr pNotification) {$/;"	f	class:NotificationCenter	signature:(Notification::Ptr pNotification)
NotificationCenter::postNotification	NotificationCenter.h	/^  void postNotification(Notification::Ptr pNotification);$/;"	p	class:NotificationCenter	access:public	signature:(Notification::Ptr pNotification)
NotificationCenter::removeObserver	NotificationCenter.cc	/^void NotificationCenter::removeObserver(const AbstractObserver& observer) {$/;"	f	class:NotificationCenter	signature:(const AbstractObserver& observer)
NotificationCenter::removeObserver	NotificationCenter.h	/^  void removeObserver(const AbstractObserver& observer);$/;"	p	class:NotificationCenter	access:public	signature:(const AbstractObserver& observer)
NotificationCenter::~NotificationCenter	NotificationCenter.cc	/^NotificationCenter::~NotificationCenter() {$/;"	f	class:NotificationCenter	signature:()
NotificationCenter::~NotificationCenter	NotificationCenter.h	/^  ~NotificationCenter();$/;"	p	class:NotificationCenter	access:public	signature:()
OBSERVER_H	Observer.h	2;"	d
Observer	Observer.h	/^  Observer();$/;"	p	class:Observer	access:private	signature:()
Observer	Observer.h	/^  Observer(C& object, Callback method) : pObject_(object), method_(method) {$/;"	f	class:Observer	access:public	signature:(C& object, Callback method)
Observer	Observer.h	/^  Observer(const Observer& observer) : AbstractObserver(observer),$/;"	f	class:Observer	access:public	signature:(const Observer& observer)
Observer	Observer.h	/^class Observer : public AbstractObserver{$/;"	c	inherits:AbstractObserver
Observer::Callback	Observer.h	/^  typedef void (C::*Callback)(N*);$/;"	t	class:Observer	access:public
Observer::Observer	Observer.h	/^  Observer();$/;"	p	class:Observer	access:private	signature:()
Observer::Observer	Observer.h	/^  Observer(C& object, Callback method) : pObject_(object), method_(method) {$/;"	f	class:Observer	access:public	signature:(C& object, Callback method)
Observer::Observer	Observer.h	/^  Observer(const Observer& observer) : AbstractObserver(observer),$/;"	f	class:Observer	access:public	signature:(const Observer& observer)
Observer::accepts	Observer.h	/^  bool accepts(Notification* pNf) const {$/;"	f	class:Observer	access:public	signature:(Notification* pNf) const
Observer::clone	Observer.h	/^  AbstractObserver* clone() const {$/;"	f	class:Observer	access:public	signature:() const
Observer::disable	Observer.h	/^  void disable() {$/;"	f	class:Observer	access:public	signature:()
Observer::equals	Observer.h	/^  bool equals(const AbstractObserver& abstractObserver) const {$/;"	f	class:Observer	access:public	signature:(const AbstractObserver& abstractObserver) const
Observer::method_	Observer.h	/^  Callback method_;$/;"	m	class:Observer	access:private
Observer::notify	Observer.h	/^  void notify(Notification* pNf) const {$/;"	f	class:Observer	access:public	signature:(Notification* pNf) const
Observer::operator =	Observer.h	/^  Observer& operator= (const Observer& observer) {$/;"	f	class:Observer	access:public	signature:(const Observer& observer)
Observer::pObject_	Observer.h	/^  C* pObject_;$/;"	m	class:Observer	access:private
Observer::~Observer	Observer.h	/^  ~Observer() {$/;"	f	class:Observer	access:public	signature:()
ObserverList	NotificationCenter.h	/^  typedef std::vector<AbstractObserverPtr> ObserverList;$/;"	t	class:NotificationCenter	access:private
Ptr	Notification.h	/^  typedef AutoPtr<Notification> Ptr;$/;"	t	class:Notification	access:public
REF_COUNTED_OBJECT	RefCountedObject.h	2;"	d
RUNNABLE_H	Runnable.h	2;"	d
ReadableNotification	SocketNotification.cc	/^ReadableNotification::ReadableNotification($/;"	f	class:ReadableNotification	signature:( SocketReactor* pReactor)
ReadableNotification	SocketNotification.h	/^  ReadableNotification(SocketReactor* pReactor);$/;"	p	class:ReadableNotification	access:public	signature:(SocketReactor* pReactor)
ReadableNotification	SocketNotification.h	/^class ReadableNotification : public SocketNotification {$/;"	c	inherits:SocketNotification
ReadableNotification::ReadableNotification	SocketNotification.cc	/^ReadableNotification::ReadableNotification($/;"	f	class:ReadableNotification	signature:( SocketReactor* pReactor)
ReadableNotification::ReadableNotification	SocketNotification.h	/^  ReadableNotification(SocketReactor* pReactor);$/;"	p	class:ReadableNotification	access:public	signature:(SocketReactor* pReactor)
ReadableNotification::~ReadableNotification	SocketNotification.cc	/^ReadableNotification::~ReadableNotification() {$/;"	f	class:ReadableNotification	signature:()
ReadableNotification::~ReadableNotification	SocketNotification.h	/^  ~ReadableNotification();$/;"	p	class:ReadableNotification	access:public	signature:()
RefCountedObject	RefCountedObject.cc	/^RefCountedObject::RefCountedObject() : counter_(1) {$/;"	f	class:RefCountedObject	signature:()
RefCountedObject	RefCountedObject.h	/^   RefCountedObject();$/;"	p	class:RefCountedObject	access:public	signature:()
RefCountedObject	RefCountedObject.h	/^   RefCountedObject(const RefCountedObject&);$/;"	p	class:RefCountedObject	access:private	signature:(const RefCountedObject&)
RefCountedObject	RefCountedObject.h	/^class RefCountedObject {$/;"	c
RefCountedObject::RefCountedObject	RefCountedObject.cc	/^RefCountedObject::RefCountedObject() : counter_(1) {$/;"	f	class:RefCountedObject	signature:()
RefCountedObject::RefCountedObject	RefCountedObject.h	/^   RefCountedObject();$/;"	p	class:RefCountedObject	access:public	signature:()
RefCountedObject::RefCountedObject	RefCountedObject.h	/^   RefCountedObject(const RefCountedObject&);$/;"	p	class:RefCountedObject	access:private	signature:(const RefCountedObject&)
RefCountedObject::counter_	RefCountedObject.h	/^   mutable int counter_;$/;"	m	class:RefCountedObject	access:private
RefCountedObject::duplicate	RefCountedObject.h	/^   void duplicate() const;$/;"	p	class:RefCountedObject	access:public	signature:() const
RefCountedObject::duplicate	RefCountedObject.h	/^inline void RefCountedObject::duplicate() const {$/;"	f	class:RefCountedObject	signature:() const
RefCountedObject::operator =	RefCountedObject.h	/^   RefCountedObject& operator=(const RefCountedObject&);$/;"	p	class:RefCountedObject	access:private	signature:(const RefCountedObject&)
RefCountedObject::referenceCount	RefCountedObject.h	/^   int referenceCount() const;$/;"	p	class:RefCountedObject	access:public	signature:() const
RefCountedObject::referenceCount	RefCountedObject.h	/^inline int RefCountedObject::referenceCount() const {$/;"	f	class:RefCountedObject	signature:() const
RefCountedObject::release	RefCountedObject.h	/^   void release() const;$/;"	p	class:RefCountedObject	access:public	signature:() const
RefCountedObject::release	RefCountedObject.h	/^inline void RefCountedObject::release() const {$/;"	f	class:RefCountedObject	signature:() const
RefCountedObject::~RefCountedObject	RefCountedObject.cc	/^RefCountedObject::~RefCountedObject() {$/;"	f	class:RefCountedObject	signature:()
RefCountedObject::~RefCountedObject	RefCountedObject.h	/^   virtual ~RefCountedObject();$/;"	p	class:RefCountedObject	access:protected	signature:()
ReferenceCounter	SharedPtr.h	/^  ReferenceCounter(): cnt_(1) {$/;"	f	class:ReferenceCounter	access:public	signature:()
ReferenceCounter	SharedPtr.h	/^class ReferenceCounter {$/;"	c
ReferenceCounter::ReferenceCounter	SharedPtr.h	/^  ReferenceCounter(): cnt_(1) {$/;"	f	class:ReferenceCounter	access:public	signature:()
ReferenceCounter::cnt_	SharedPtr.h	/^  int cnt_;$/;"	m	class:ReferenceCounter	access:private
ReferenceCounter::duplicate	SharedPtr.h	/^  void duplicate() {$/;"	f	class:ReferenceCounter	access:public	signature:()
ReferenceCounter::referenceCount	SharedPtr.h	/^  int referenceCount() {$/;"	f	class:ReferenceCounter	access:public	signature:()
ReferenceCounter::release	SharedPtr.h	/^  int release() {$/;"	f	class:ReferenceCounter	access:public	signature:()
ReleaseArrayPolicy	SharedPtr.h	/^class ReleaseArrayPolicy {$/;"	c
ReleaseArrayPolicy::release	SharedPtr.h	/^  static void release(C* pObj) {$/;"	f	class:ReleaseArrayPolicy	access:public	signature:(C* pObj)
ReleasePolicy	SharedPtr.h	/^class ReleasePolicy {$/;"	c
ReleasePolicy::release	SharedPtr.h	/^   static void release(C* pObj) {$/;"	f	class:ReleasePolicy	access:public	signature:(C* pObj)
Runnable	Runnable.c	/^Runnable::Runnable() {$/;"	f	class:Runnable
Runnable	Runnable.h	/^  Runnable();$/;"	p	class:Runnable	access:public	signature:()
Runnable	Runnable.h	/^class Runnable {$/;"	c
Runnable::Runnable	Runnable.c	/^Runnable::Runnable() {$/;"	f	class:Runnable
Runnable::Runnable	Runnable.h	/^  Runnable();$/;"	p	class:Runnable	access:public	signature:()
Runnable::run	Runnable.h	/^  virtual void run() = 0;$/;"	p	class:Runnable	access:public	signature:()
Runnable::~Runnable	Runnable.c	/^Runnable::~Runnable() {$/;"	f	class:Runnable
Runnable::~Runnable	Runnable.h	/^  virtual ~Runnable();$/;"	p	class:Runnable	access:public	signature:()
SECONDS	Timespan.cc	/^const Timespan::TimeDiff Timespan::SECONDS = $/;"	m	class:Timespan	file:
SECONDS	Timespan.h	/^  static const TimeDiff SECONDS;$/;"	m	class:Timespan	access:public
SELECT_ERROR	Socket.h	/^    SELECT_ERROR = 4$/;"	e	enum:Socket::SelectMode
SELECT_ERROR	SocketImpl.h	/^    SELECT_ERROR = 4$/;"	e	enum:SocketImpl::SelectMode
SELECT_READ	Socket.h	/^    SELECT_READ = 1,$/;"	e	enum:Socket::SelectMode
SELECT_READ	SocketImpl.h	/^    SELECT_READ = 1,$/;"	e	enum:SocketImpl::SelectMode
SELECT_WRITE	Socket.h	/^    SELECT_WRITE = 2,$/;"	e	enum:Socket::SelectMode
SELECT_WRITE	SocketImpl.h	/^    SELECT_WRITE = 2,$/;"	e	enum:SocketImpl::SelectMode
SHARED_PTR_H	SharedPtr.h	2;"	d
SOCKETADDRESS_H	SocketAddress.h	2;"	d
SOCKETIMPL_H	SocketImpl.h	2;"	d
SOCKET_H	Socket.h	2;"	d
SOCKET_NOTIFICATION_H	SocketNotification.h	2;"	d
STREAM_SOCKET_IMPL_H	StreamSocketImpl.h	2;"	d
SelectMode	Socket.h	/^  enum SelectMode {$/;"	g	class:Socket	access:public
SelectMode	SocketImpl.h	/^  enum SelectMode {$/;"	g	class:SocketImpl	access:public
SharedPtr	SharedPtr.h	/^  SharedPtr() : pCounter_(new RC), ptr_(0) {$/;"	f	class:SharedPtr	access:public	signature:()
SharedPtr	SharedPtr.h	/^  SharedPtr(C* ptr) : pCounter_(new RC), ptr_(ptr) {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr)
SharedPtr	SharedPtr.h	/^  SharedPtr(RC* pCounter, C* ptr) : pCounter_(pCounter), ptr_(ptr) {$/;"	f	class:SharedPtr	access:private	signature:(RC* pCounter, C* ptr)
SharedPtr	SharedPtr.h	/^  SharedPtr(const SharedPtr& ptr) : pCounter_(ptr.pCounter_), ptr_(ptr.ptr_) {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr)
SharedPtr	SharedPtr.h	/^  SharedPtr(const SharedPtr<Other, RC, OtherRP>& ptr) $/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr<Other, RC, OtherRP>& ptr)
SharedPtr	SharedPtr.h	/^class SharedPtr {$/;"	c
SharedPtr::SharedPtr	SharedPtr.h	/^  SharedPtr() : pCounter_(new RC), ptr_(0) {$/;"	f	class:SharedPtr	access:public	signature:()
SharedPtr::SharedPtr	SharedPtr.h	/^  SharedPtr(C* ptr) : pCounter_(new RC), ptr_(ptr) {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr)
SharedPtr::SharedPtr	SharedPtr.h	/^  SharedPtr(RC* pCounter, C* ptr) : pCounter_(pCounter), ptr_(ptr) {$/;"	f	class:SharedPtr	access:private	signature:(RC* pCounter, C* ptr)
SharedPtr::SharedPtr	SharedPtr.h	/^  SharedPtr(const SharedPtr& ptr) : pCounter_(ptr.pCounter_), ptr_(ptr.ptr_) {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr)
SharedPtr::SharedPtr	SharedPtr.h	/^  SharedPtr(const SharedPtr<Other, RC, OtherRP>& ptr) $/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr<Other, RC, OtherRP>& ptr)
SharedPtr::assign	SharedPtr.h	/^  SharedPtr& assign(C* ptr) {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr)
SharedPtr::assign	SharedPtr.h	/^  SharedPtr& assign(const SharedPtr& ptr) {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr)
SharedPtr::assign	SharedPtr.h	/^  SharedPtr& assign(const SharedPtr<Other, RC, OtherRP>& ptr) {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr<Other, RC, OtherRP>& ptr)
SharedPtr::cast	SharedPtr.h	/^  SharedPtr<Other, RC, RP> cast() const {$/;"	f	class:SharedPtr	access:public	signature:() const
SharedPtr::decref	SharedPtr.h	/^  C* decref() const {$/;"	f	class:SharedPtr	access:private	signature:() const
SharedPtr::get	SharedPtr.h	/^  C* get() {$/;"	f	class:SharedPtr	access:public	signature:()
SharedPtr::get	SharedPtr.h	/^  const C* get() const {$/;"	f	class:SharedPtr	access:public	signature:() const
SharedPtr::isNull	SharedPtr.h	/^  bool isNull() const {$/;"	f	class:SharedPtr	access:public	signature:() const
SharedPtr::operator !	SharedPtr.h	/^  bool operator ! () const {$/;"	f	class:SharedPtr	access:public	signature:() const
SharedPtr::operator !=	SharedPtr.h	/^  bool operator != (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
SharedPtr::operator !=	SharedPtr.h	/^  bool operator != (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
SharedPtr::operator !=	SharedPtr.h	/^  bool operator != (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
SharedPtr::operator *	SharedPtr.h	/^  C& operator * () {$/;"	f	class:SharedPtr	access:public	signature:()
SharedPtr::operator *	SharedPtr.h	/^  const C& operator * () const {$/;"	f	class:SharedPtr	access:public	signature:() const
SharedPtr::operator ->	SharedPtr.h	/^  C* operator -> () {$/;"	f	class:SharedPtr	access:public	signature:()
SharedPtr::operator ->	SharedPtr.h	/^  const C* operator -> () const{$/;"	f	class:SharedPtr	access:public	signature:() const
SharedPtr::operator <	SharedPtr.h	/^  bool operator < (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
SharedPtr::operator <	SharedPtr.h	/^  bool operator < (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
SharedPtr::operator <	SharedPtr.h	/^  bool operator < (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
SharedPtr::operator <=	SharedPtr.h	/^  bool operator <= (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
SharedPtr::operator <=	SharedPtr.h	/^  bool operator <= (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
SharedPtr::operator <=	SharedPtr.h	/^ bool operator <= (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
SharedPtr::operator =	SharedPtr.h	/^  SharedPtr& operator = (C* ptr) {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr)
SharedPtr::operator =	SharedPtr.h	/^  SharedPtr& operator = (const SharedPtr& ptr) {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr)
SharedPtr::operator =	SharedPtr.h	/^  SharedPtr& operator = (const SharedPtr<Other, RC, OtherRP>& ptr) {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr<Other, RC, OtherRP>& ptr)
SharedPtr::operator ==	SharedPtr.h	/^  bool operator == (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
SharedPtr::operator ==	SharedPtr.h	/^  bool operator == (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
SharedPtr::operator ==	SharedPtr.h	/^  bool operator == (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
SharedPtr::operator >	SharedPtr.h	/^  bool operator > (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
SharedPtr::operator >	SharedPtr.h	/^  bool operator > (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
SharedPtr::operator >	SharedPtr.h	/^  bool operator > (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
SharedPtr::operator >=	SharedPtr.h	/^  bool operator >= (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
SharedPtr::operator >=	SharedPtr.h	/^  bool operator >= (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
SharedPtr::operator >=	SharedPtr.h	/^  bool operator >= (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
SharedPtr::operator C*	SharedPtr.h	/^  operator C* () {$/;"	f	class:SharedPtr	access:public	signature:()
SharedPtr::operator const C*	SharedPtr.h	/^  operator const C* () {$/;"	f	class:SharedPtr	access:public	signature:()
SharedPtr::pCounter_	SharedPtr.h	/^  RC* pCounter_;$/;"	m	class:SharedPtr	access:private
SharedPtr::ptr_	SharedPtr.h	/^  C*  ptr_;$/;"	m	class:SharedPtr	access:private
SharedPtr::referenceCount	SharedPtr.h	/^  int referenceCount() const {$/;"	f	class:SharedPtr	access:public	signature:() const
SharedPtr::release	SharedPtr.h	/^  void release() {$/;"	f	class:SharedPtr	access:private	signature:()
SharedPtr::swap	SharedPtr.h	/^  void swap(SharedPtr& ptr) {$/;"	f	class:SharedPtr	access:public	signature:(SharedPtr& ptr)
SharedPtr::unsafeCast	SharedPtr.h	/^  SharedPtr<Other, RC, RP> unsafeCast() const {$/;"	f	class:SharedPtr	access:public	signature:() const
SharedPtr::~SharedPtr	SharedPtr.h	/^  ~SharedPtr() {$/;"	f	class:SharedPtr	access:public	signature:()
ShutdownNotification	SocketNotification.cc	/^ShutdownNotification::ShutdownNotification($/;"	f	class:ShutdownNotification	signature:( SocketReactor* pReactor)
ShutdownNotification	SocketNotification.h	/^  ShutdownNotification(SocketReactor* pReactor);$/;"	p	class:ShutdownNotification	access:public	signature:(SocketReactor* pReactor)
ShutdownNotification	SocketNotification.h	/^class ShutdownNotification : public SocketNotification {$/;"	c	inherits:SocketNotification
ShutdownNotification::ShutdownNotification	SocketNotification.cc	/^ShutdownNotification::ShutdownNotification($/;"	f	class:ShutdownNotification	signature:( SocketReactor* pReactor)
ShutdownNotification::ShutdownNotification	SocketNotification.h	/^  ShutdownNotification(SocketReactor* pReactor);$/;"	p	class:ShutdownNotification	access:public	signature:(SocketReactor* pReactor)
ShutdownNotification::~ShutdownNotification	SocketNotification.cc	/^ShutdownNotification::~ShutdownNotification() {$/;"	f	class:ShutdownNotification	signature:()
ShutdownNotification::~ShutdownNotification	SocketNotification.h	/^  ~ShutdownNotification();$/;"	p	class:ShutdownNotification	access:public	signature:()
Socket	Socket.cc	/^Socket::Socket() : pImpl_(new StreamSocketImpl) {$/;"	f	class:Socket	signature:()
Socket	Socket.cc	/^Socket::Socket(SocketImpl* impl) : pImpl_(impl) {$/;"	f	class:Socket	signature:(SocketImpl* impl)
Socket	Socket.cc	/^Socket::Socket(const Socket& socket) : pImpl_(socket.pImpl_){$/;"	f	class:Socket	signature:(const Socket& socket)
Socket	Socket.h	/^  Socket();$/;"	p	class:Socket	access:public	signature:()
Socket	Socket.h	/^  Socket(SocketImpl* pImpl);$/;"	p	class:Socket	access:protected	signature:(SocketImpl* pImpl)
Socket	Socket.h	/^  Socket(const Socket& socket);$/;"	p	class:Socket	access:public	signature:(const Socket& socket)
Socket	Socket.h	/^class Socket {$/;"	c
Socket::SELECT_ERROR	Socket.h	/^    SELECT_ERROR = 4$/;"	e	enum:Socket::SelectMode
Socket::SELECT_READ	Socket.h	/^    SELECT_READ = 1,$/;"	e	enum:Socket::SelectMode
Socket::SELECT_WRITE	Socket.h	/^    SELECT_WRITE = 2,$/;"	e	enum:Socket::SelectMode
Socket::SelectMode	Socket.h	/^  enum SelectMode {$/;"	g	class:Socket	access:public
Socket::Socket	Socket.cc	/^Socket::Socket() : pImpl_(new StreamSocketImpl) {$/;"	f	class:Socket	signature:()
Socket::Socket	Socket.cc	/^Socket::Socket(SocketImpl* impl) : pImpl_(impl) {$/;"	f	class:Socket	signature:(SocketImpl* impl)
Socket::Socket	Socket.cc	/^Socket::Socket(const Socket& socket) : pImpl_(socket.pImpl_){$/;"	f	class:Socket	signature:(const Socket& socket)
Socket::Socket	Socket.h	/^  Socket();$/;"	p	class:Socket	access:public	signature:()
Socket::Socket	Socket.h	/^  Socket(SocketImpl* pImpl);$/;"	p	class:Socket	access:protected	signature:(SocketImpl* pImpl)
Socket::Socket	Socket.h	/^  Socket(const Socket& socket);$/;"	p	class:Socket	access:public	signature:(const Socket& socket)
Socket::SocketList	Socket.h	/^  typedef std::vector<Socket> SocketList;$/;"	t	class:Socket	access:public
Socket::address	Socket.h	/^  SocketAddress address() const;$/;"	p	class:Socket	access:public	signature:() const
Socket::address	Socket.h	/^inline SocketAddress Socket::address() const{$/;"	f	class:Socket	signature:() const
Socket::available	Socket.h	/^  int available() const;$/;"	p	class:Socket	access:public	signature:() const
Socket::available	Socket.h	/^inline int Socket::available() const {$/;"	f	class:Socket	signature:() const
Socket::close	Socket.h	/^  void close();$/;"	p	class:Socket	access:public	signature:()
Socket::close	Socket.h	/^inline void Socket::close() {$/;"	f	class:Socket	signature:()
Socket::getBlocking	Socket.h	/^  bool getBlocking()const;$/;"	p	class:Socket	access:public	signature:() const
Socket::getBlocking	Socket.h	/^inline bool Socket::getBlocking() const{$/;"	f	class:Socket	signature:() const
Socket::getKeepAlive	Socket.h	/^  bool getKeepAlive()const;$/;"	p	class:Socket	access:public	signature:() const
Socket::getKeepAlive	Socket.h	/^inline bool Socket::getKeepAlive() const{$/;"	f	class:Socket	signature:() const
Socket::getLinger	Socket.h	/^  void getLinger(bool& on, int& seconds)const ;$/;"	p	class:Socket	access:public	signature:(bool& on, int& seconds) const
Socket::getLinger	Socket.h	/^inline void Socket::getLinger(bool& on, int& seconds) const{$/;"	f	class:Socket	signature:(bool& on, int& seconds) const
Socket::getNoDelay	Socket.h	/^  bool getNoDelay()const ;$/;"	p	class:Socket	access:public	signature:() const
Socket::getNoDelay	Socket.h	/^inline bool Socket::getNoDelay() const{$/;"	f	class:Socket	signature:() const
Socket::getOOBInline	Socket.h	/^  bool getOOBInline() const;$/;"	p	class:Socket	access:public	signature:() const
Socket::getOOBInline	Socket.h	/^inline bool Socket::getOOBInline() const{$/;"	f	class:Socket	signature:() const
Socket::getOption	Socket.h	/^  void getOption(int level, int opotion, IPAddress& value)const;$/;"	p	class:Socket	access:public	signature:(int level, int opotion, IPAddress& value) const
Socket::getOption	Socket.h	/^  void getOption(int level, int opotion, Timespan& value)const;$/;"	p	class:Socket	access:public	signature:(int level, int opotion, Timespan& value) const
Socket::getOption	Socket.h	/^  void getOption(int level, int opotion, int& value)const ;$/;"	p	class:Socket	access:public	signature:(int level, int opotion, int& value) const
Socket::getOption	Socket.h	/^  void getOption(int level, int opotion, unsigned char& value)const;$/;"	p	class:Socket	access:public	signature:(int level, int opotion, unsigned char& value) const
Socket::getOption	Socket.h	/^  void getOption(int level, int opotion, unsigned& value)const;$/;"	p	class:Socket	access:public	signature:(int level, int opotion, unsigned& value) const
Socket::getOption	Socket.h	/^inline void Socket::getOption(int level, int option, Timespan& value) const{$/;"	f	class:Socket	signature:(int level, int option, Timespan& value) const
Socket::getOption	Socket.h	/^inline void Socket::getOption(int level, int option, int& value) const{$/;"	f	class:Socket	signature:(int level, int option, int& value) const
Socket::getOption	Socket.h	/^inline void Socket::getOption(int level, int option, unsigned& value) const{$/;"	f	class:Socket	signature:(int level, int option, unsigned& value) const
Socket::getOption	Socket.h	/^inline void Socket::getOption(int level, int option,$/;"	f	class:Socket	signature:(int level, int option, IPAddress& value) const
Socket::getOption	Socket.h	/^inline void Socket::getOption(int level, int option,$/;"	f	class:Socket	signature:(int level, int option, unsigned char& value) const
Socket::getReceiveBufferSize	Socket.h	/^  int getReceiveBufferSize()const;$/;"	p	class:Socket	access:public	signature:() const
Socket::getReceiveBufferSize	Socket.h	/^inline int Socket::getReceiveBufferSize() const {$/;"	f	class:Socket	signature:() const
Socket::getReceiveTimeout	Socket.h	/^  Timespan getReceiveTimeout() const;$/;"	p	class:Socket	access:public	signature:() const
Socket::getReceiveTimeout	Socket.h	/^inline Timespan Socket::getReceiveTimeout() const {$/;"	f	class:Socket	signature:() const
Socket::getReuseAddress	Socket.h	/^  bool getReuseAddress()const ;$/;"	p	class:Socket	access:public	signature:() const
Socket::getReuseAddress	Socket.h	/^inline bool Socket::getReuseAddress() const {$/;"	f	class:Socket	signature:() const
Socket::getReusePort	Socket.h	/^  bool getReusePort()const ;$/;"	p	class:Socket	access:public	signature:() const
Socket::getReusePort	Socket.h	/^inline bool Socket::getReusePort() const{$/;"	f	class:Socket	signature:() const
Socket::getSendBufferSize	Socket.h	/^  int getSendBufferSize() const;$/;"	p	class:Socket	access:public	signature:() const
Socket::getSendBufferSize	Socket.h	/^inline int Socket::getSendBufferSize() const{$/;"	f	class:Socket	signature:() const
Socket::getSendTimeout	Socket.h	/^  Timespan getSendTimeout() const;$/;"	p	class:Socket	access:public	signature:() const
Socket::getSendTimeout	Socket.h	/^inline Timespan Socket::getSendTimeout() const{$/;"	f	class:Socket	signature:() const
Socket::impl	Socket.h	/^  SocketImpl* impl() const;$/;"	p	class:Socket	access:public	signature:() const
Socket::impl	Socket.h	/^inline SocketImpl* Socket::impl() const{$/;"	f	class:Socket	signature:() const
Socket::operator !=	Socket.h	/^  bool operator != (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
Socket::operator !=	Socket.h	/^inline bool Socket::operator!= (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
Socket::operator <	Socket.h	/^  bool operator <  (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
Socket::operator <	Socket.h	/^inline bool Socket::operator<  (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
Socket::operator <=	Socket.h	/^  bool operator <= (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
Socket::operator <=	Socket.h	/^inline bool Socket::operator<= (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
Socket::operator =	Socket.cc	/^Socket& Socket::operator=(const Socket& socket) {$/;"	f	class:Socket	signature:(const Socket& socket)
Socket::operator =	Socket.h	/^  Socket& operator= (const Socket& socket);$/;"	p	class:Socket	access:public	signature:(const Socket& socket)
Socket::operator ==	Socket.h	/^  bool operator == (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
Socket::operator ==	Socket.h	/^inline bool Socket::operator== (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
Socket::operator >	Socket.h	/^  bool operator >  (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
Socket::operator >	Socket.h	/^inline bool Socket::operator>  (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
Socket::operator >=	Socket.h	/^  bool operator >= (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
Socket::operator >=	Socket.h	/^inline bool Socket::operator>= (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
Socket::pImpl_	Socket.h	/^  SocketImpl* pImpl_;$/;"	m	class:Socket	access:private
Socket::peerAddress	Socket.h	/^  SocketAddress peerAddress() const;$/;"	p	class:Socket	access:public	signature:() const
Socket::peerAddress	Socket.h	/^inline SocketAddress Socket::peerAddress() const{$/;"	f	class:Socket	signature:() const
Socket::poll	Socket.h	/^  bool poll(const Timespan& timeout, int mode) const;$/;"	p	class:Socket	access:public	signature:(const Timespan& timeout, int mode) const
Socket::poll	Socket.h	/^inline bool Socket::poll(const Timespan& timeout, int mode) const{$/;"	f	class:Socket	signature:(const Timespan& timeout, int mode) const
Socket::select	Socket.cc	/^int Socket::select(SocketList& readList, SocketList& writeList,$/;"	f	class:Socket	signature:(SocketList& readList, SocketList& writeList, SocketList& exceptList, const Timespan& timeout)
Socket::select	Socket.h	/^  static int select(SocketList& readList, SocketList& writeList,$/;"	p	class:Socket	access:public	signature:(SocketList& readList, SocketList& writeList, SocketList& exceptList, const Timespan& timeout)
Socket::setBlocking	Socket.h	/^  void setBlocking(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
Socket::setBlocking	Socket.h	/^inline void Socket::setBlocking(bool flag) {$/;"	f	class:Socket	signature:(bool flag)
Socket::setKeepAlive	Socket.h	/^  void setKeepAlive(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
Socket::setKeepAlive	Socket.h	/^inline void Socket::setKeepAlive(bool flag) {$/;"	f	class:Socket	signature:(bool flag)
Socket::setLinger	Socket.h	/^  void setLinger(bool on, int seconds);$/;"	p	class:Socket	access:public	signature:(bool on, int seconds)
Socket::setLinger	Socket.h	/^inline void Socket::setLinger(bool on, int seconds) {$/;"	f	class:Socket	signature:(bool on, int seconds)
Socket::setNoDelay	Socket.h	/^  void setNoDelay(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
Socket::setNoDelay	Socket.h	/^inline void Socket::setNoDelay(bool flag){$/;"	f	class:Socket	signature:(bool flag)
Socket::setOOBInline	Socket.h	/^  void setOOBInline(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
Socket::setOOBInline	Socket.h	/^inline void Socket::setOOBInline(bool flag) {$/;"	f	class:Socket	signature:(bool flag)
Socket::setOption	Socket.h	/^  void setOption(int level, int option, const IPAddress& value);$/;"	p	class:Socket	access:public	signature:(int level, int option, const IPAddress& value)
Socket::setOption	Socket.h	/^  void setOption(int level, int option, const Timespan& value);$/;"	p	class:Socket	access:public	signature:(int level, int option, const Timespan& value)
Socket::setOption	Socket.h	/^  void setOption(int level, int option, int value);$/;"	p	class:Socket	access:public	signature:(int level, int option, int value)
Socket::setOption	Socket.h	/^  void setOption(int level, int option, unsigned  value);$/;"	p	class:Socket	access:public	signature:(int level, int option, unsigned value)
Socket::setOption	Socket.h	/^  void setOption(int level, int option, unsigned char value);$/;"	p	class:Socket	access:public	signature:(int level, int option, unsigned char value)
Socket::setOption	Socket.h	/^inline void Socket::setOption(int level, int option, const IPAddress& value) {$/;"	f	class:Socket	signature:(int level, int option, const IPAddress& value)
Socket::setOption	Socket.h	/^inline void Socket::setOption(int level, int option, int value) {$/;"	f	class:Socket	signature:(int level, int option, int value)
Socket::setOption	Socket.h	/^inline void Socket::setOption(int level, int option, unsigned char value) {$/;"	f	class:Socket	signature:(int level, int option, unsigned char value)
Socket::setOption	Socket.h	/^inline void Socket::setOption(int level, int option, unsigned value) {$/;"	f	class:Socket	signature:(int level, int option, unsigned value)
Socket::setOption	Socket.h	/^inline void Socket::setOption(int level, int option,$/;"	f	class:Socket	signature:(int level, int option, const Timespan& value)
Socket::setReceiveBufferSize	Socket.h	/^  void setReceiveBufferSize(int size);$/;"	p	class:Socket	access:public	signature:(int size)
Socket::setReceiveBufferSize	Socket.h	/^inline void Socket::setReceiveBufferSize(int size) {$/;"	f	class:Socket	signature:(int size)
Socket::setReceiveTimeout	Socket.h	/^  void setReceiveTimeout(const Timespan& timeout);$/;"	p	class:Socket	access:public	signature:(const Timespan& timeout)
Socket::setReceiveTimeout	Socket.h	/^inline void Socket::setReceiveTimeout(const Timespan& timeout) {$/;"	f	class:Socket	signature:(const Timespan& timeout)
Socket::setReuseAddress	Socket.h	/^  void setReuseAddress(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
Socket::setReuseAddress	Socket.h	/^inline void Socket::setReuseAddress(bool flag) {$/;"	f	class:Socket	signature:(bool flag)
Socket::setReusePort	Socket.h	/^  void setReusePort(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
Socket::setReusePort	Socket.h	/^inline void Socket::setReusePort(bool flag) {$/;"	f	class:Socket	signature:(bool flag)
Socket::setSendBufferSize	Socket.h	/^  void setSendBufferSize(int size);$/;"	p	class:Socket	access:public	signature:(int size)
Socket::setSendBufferSize	Socket.h	/^inline void Socket::setSendBufferSize(int size) {$/;"	f	class:Socket	signature:(int size)
Socket::setSendTimeout	Socket.h	/^  void setSendTimeout(const Timespan& timeout);$/;"	p	class:Socket	access:public	signature:(const Timespan& timeout)
Socket::setSendTimeout	Socket.h	/^inline void Socket::setSendTimeout(const Timespan& timeout) {$/;"	f	class:Socket	signature:(const Timespan& timeout)
Socket::sockfd	Socket.h	/^  int sockfd() const;$/;"	p	class:Socket	access:protected	signature:() const
Socket::sockfd	Socket.h	/^inline int Socket::sockfd() const {$/;"	f	class:Socket	signature:() const
Socket::supportsIPv4	Socket.h	/^  static bool supportsIPv4();$/;"	p	class:Socket	access:public	signature:()
Socket::supportsIPv4	Socket.h	/^inline bool Socket::supportsIPv4() {$/;"	f	class:Socket	signature:()
Socket::supportsIPv6	Socket.h	/^  static bool supportsIPv6();$/;"	p	class:Socket	access:public	signature:()
Socket::~Socket	Socket.cc	/^Socket::~Socket() {$/;"	f	class:Socket	signature:()
Socket::~Socket	Socket.h	/^  virtual ~Socket();$/;"	p	class:Socket	access:public	signature:()
SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress() {$/;"	f	class:SocketAddress	signature:()
SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const IPAddress& host, uint16_t port) {$/;"	f	class:SocketAddress	signature:(const IPAddress& host, uint16_t port)
SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const SocketAddress& addr) {$/;"	f	class:SocketAddress	signature:(const SocketAddress& addr)
SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const std::string hostAndport) {$/;"	f	class:SocketAddress	signature:(const std::string hostAndport)
SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const std::string& host, uint16_t port) {$/;"	f	class:SocketAddress	signature:(const std::string& host, uint16_t port)
SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const std::string& host,$/;"	f	class:SocketAddress	signature:(const std::string& host, const std::string& port)
SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const struct sockaddr* addr,$/;"	f	class:SocketAddress	signature:(const struct sockaddr* addr, socklen_t length)
SocketAddress	SocketAddress.h	/^  SocketAddress();$/;"	p	class:SocketAddress	access:public	signature:()
SocketAddress	SocketAddress.h	/^  SocketAddress(const IPAddress& host, uint16_t port);$/;"	p	class:SocketAddress	access:public	signature:(const IPAddress& host, uint16_t port)
SocketAddress	SocketAddress.h	/^  SocketAddress(const SocketAddress& addr);$/;"	p	class:SocketAddress	access:public	signature:(const SocketAddress& addr)
SocketAddress	SocketAddress.h	/^  SocketAddress(const std::string& host, const std::string& port);$/;"	p	class:SocketAddress	access:public	signature:(const std::string& host, const std::string& port)
SocketAddress	SocketAddress.h	/^  SocketAddress(const std::string& host, uint16_t port);$/;"	p	class:SocketAddress	access:public	signature:(const std::string& host, uint16_t port)
SocketAddress	SocketAddress.h	/^  SocketAddress(const struct sockaddr* addr, socklen_t length);$/;"	p	class:SocketAddress	access:public	signature:(const struct sockaddr* addr, socklen_t length)
SocketAddress	SocketAddress.h	/^  explicit SocketAddress(const std::string hostAndport);$/;"	p	class:SocketAddress	access:public	signature:(const std::string hostAndport)
SocketAddress	SocketAddress.h	/^class SocketAddress {$/;"	c
SocketAddress::MAX_ADDRESS_LEN	SocketAddress.h	/^    MAX_ADDRESS_LEN = sizeof(struct in6_addr)$/;"	e	enum:SocketAddress::__anon1
SocketAddress::SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress() {$/;"	f	class:SocketAddress	signature:()
SocketAddress::SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const IPAddress& host, uint16_t port) {$/;"	f	class:SocketAddress	signature:(const IPAddress& host, uint16_t port)
SocketAddress::SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const SocketAddress& addr) {$/;"	f	class:SocketAddress	signature:(const SocketAddress& addr)
SocketAddress::SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const std::string hostAndport) {$/;"	f	class:SocketAddress	signature:(const std::string hostAndport)
SocketAddress::SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const std::string& host, uint16_t port) {$/;"	f	class:SocketAddress	signature:(const std::string& host, uint16_t port)
SocketAddress::SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const std::string& host,$/;"	f	class:SocketAddress	signature:(const std::string& host, const std::string& port)
SocketAddress::SocketAddress	SocketAddress.cc	/^SocketAddress::SocketAddress(const struct sockaddr* addr,$/;"	f	class:SocketAddress	signature:(const struct sockaddr* addr, socklen_t length)
SocketAddress::SocketAddress	SocketAddress.h	/^  SocketAddress();$/;"	p	class:SocketAddress	access:public	signature:()
SocketAddress::SocketAddress	SocketAddress.h	/^  SocketAddress(const IPAddress& host, uint16_t port);$/;"	p	class:SocketAddress	access:public	signature:(const IPAddress& host, uint16_t port)
SocketAddress::SocketAddress	SocketAddress.h	/^  SocketAddress(const SocketAddress& addr);$/;"	p	class:SocketAddress	access:public	signature:(const SocketAddress& addr)
SocketAddress::SocketAddress	SocketAddress.h	/^  SocketAddress(const std::string& host, const std::string& port);$/;"	p	class:SocketAddress	access:public	signature:(const std::string& host, const std::string& port)
SocketAddress::SocketAddress	SocketAddress.h	/^  SocketAddress(const std::string& host, uint16_t port);$/;"	p	class:SocketAddress	access:public	signature:(const std::string& host, uint16_t port)
SocketAddress::SocketAddress	SocketAddress.h	/^  SocketAddress(const struct sockaddr* addr, socklen_t length);$/;"	p	class:SocketAddress	access:public	signature:(const struct sockaddr* addr, socklen_t length)
SocketAddress::SocketAddress	SocketAddress.h	/^  explicit SocketAddress(const std::string hostAndport);$/;"	p	class:SocketAddress	access:public	signature:(const std::string hostAndport)
SocketAddress::addr	SocketAddress.h	/^  const struct sockaddr* addr() const;$/;"	p	class:SocketAddress	access:public	signature:() const
SocketAddress::af	SocketAddress.cc	/^int SocketAddress::af() const {$/;"	f	class:SocketAddress	signature:() const
SocketAddress::af	SocketAddress.h	/^  int af() const;$/;"	p	class:SocketAddress	access:public	signature:() const
SocketAddress::family	SocketAddress.h	/^  IPAddress::Family family() const;$/;"	p	class:SocketAddress	access:public	signature:() const
SocketAddress::host	SocketAddress.cc	/^IPAddress SocketAddress::host() const {$/;"	f	class:SocketAddress	signature:() const
SocketAddress::host	SocketAddress.h	/^  IPAddress host() const;$/;"	p	class:SocketAddress	access:public	signature:() const
SocketAddress::init	SocketAddress.cc	/^void SocketAddress::init(const IPAddress& host, uint16_t port) {$/;"	f	class:SocketAddress	signature:(const IPAddress& host, uint16_t port)
SocketAddress::init	SocketAddress.cc	/^void SocketAddress::init(const std::string& host, uint16_t port) {$/;"	f	class:SocketAddress	signature:(const std::string& host, uint16_t port)
SocketAddress::init	SocketAddress.h	/^  void init(const IPAddress& host, uint16_t port);$/;"	p	class:SocketAddress	access:protected	signature:(const IPAddress& host, uint16_t port)
SocketAddress::init	SocketAddress.h	/^  void init(const std::string& host, uint16_t port);$/;"	p	class:SocketAddress	access:protected	signature:(const std::string& host, uint16_t port)
SocketAddress::length	SocketAddress.cc	/^socklen_t SocketAddress::length() const {$/;"	f	class:SocketAddress	signature:() const
SocketAddress::length	SocketAddress.h	/^  socklen_t length() const;$/;"	p	class:SocketAddress	access:public	signature:() const
SocketAddress::operator !=	SocketAddress.h	/^  bool operator !=(const SocketAddress& addr) const;$/;"	p	class:SocketAddress	access:public	signature:(const SocketAddress& addr) const
SocketAddress::operator !=	SocketAddress.h	/^inline bool SocketAddress::operator!=(const SocketAddress& addr) const {$/;"	f	class:SocketAddress	signature:(const SocketAddress& addr) const
SocketAddress::operator =	SocketAddress.cc	/^SocketAddress& SocketAddress::operator = (const SocketAddress& addr) {$/;"	f	class:SocketAddress	signature:(const SocketAddress& addr)
SocketAddress::operator =	SocketAddress.h	/^  SocketAddress& operator= (const SocketAddress& addr);$/;"	p	class:SocketAddress	access:public	signature:(const SocketAddress& addr)
SocketAddress::operator ==	SocketAddress.h	/^  bool operator ==(const SocketAddress& addr) const;$/;"	p	class:SocketAddress	access:public	signature:(const SocketAddress& addr) const
SocketAddress::operator ==	SocketAddress.h	/^inline bool SocketAddress::operator== (const SocketAddress& addr) const {$/;"	f	class:SocketAddress	signature:(const SocketAddress& addr) const
SocketAddress::pImpl_	SocketAddress.h	/^  SocketAddressImpl* pImpl_;$/;"	m	class:SocketAddress	access:private
SocketAddress::port	SocketAddress.cc	/^uint16_t SocketAddress::port() const {$/;"	f	class:SocketAddress	signature:() const
SocketAddress::port	SocketAddress.h	/^  uint16_t port() const;$/;"	p	class:SocketAddress	access:public	signature:() const
SocketAddress::resolveService	SocketAddress.cc	/^uint16_t SocketAddress::resolveService(const std::string& service) {$/;"	f	class:SocketAddress	signature:(const std::string& service)
SocketAddress::resolveService	SocketAddress.h	/^  uint16_t resolveService(const std::string& service);$/;"	p	class:SocketAddress	access:protected	signature:(const std::string& service)
SocketAddress::swap	SocketAddress.cc	/^void SocketAddress::swap(SocketAddress& addr) {$/;"	f	class:SocketAddress	signature:(SocketAddress& addr)
SocketAddress::swap	SocketAddress.h	/^  void swap(SocketAddress& addr);$/;"	p	class:SocketAddress	access:public	signature:(SocketAddress& addr)
SocketAddress::toString	SocketAddress.cc	/^std::string SocketAddress::toString() const {$/;"	f	class:SocketAddress	signature:() const
SocketAddress::toString	SocketAddress.h	/^  std::string toString() const;$/;"	p	class:SocketAddress	access:public	signature:() const
SocketAddress::~SocketAddress	SocketAddress.cc	/^SocketAddress::~SocketAddress() {$/;"	f	class:SocketAddress	signature:()
SocketAddress::~SocketAddress	SocketAddress.h	/^  ~SocketAddress();$/;"	p	class:SocketAddress	access:public	signature:()
SocketAddressImpl	SocketAddress.cc	/^  SocketAddressImpl() {$/;"	f	class:SocketAddressImpl	access:protected	signature:()
SocketAddressImpl	SocketAddress.cc	/^  SocketAddressImpl(const SocketAddressImpl&);$/;"	p	class:SocketAddressImpl	file:	access:private	signature:(const SocketAddressImpl&)
SocketAddressImpl	SocketAddress.cc	/^class SocketAddressImpl : public RefCountedObject {$/;"	c	file:	inherits:RefCountedObject
SocketAddressImpl::SocketAddressImpl	SocketAddress.cc	/^  SocketAddressImpl() {$/;"	f	class:SocketAddressImpl	access:protected	signature:()
SocketAddressImpl::SocketAddressImpl	SocketAddress.cc	/^  SocketAddressImpl(const SocketAddressImpl&);$/;"	p	class:SocketAddressImpl	file:	access:private	signature:(const SocketAddressImpl&)
SocketAddressImpl::addr	SocketAddress.cc	/^  virtual const struct sockaddr* addr() const = 0;$/;"	p	class:SocketAddressImpl	file:	access:public	signature:() const
SocketAddressImpl::af	SocketAddress.cc	/^  virtual int af() const = 0;$/;"	p	class:SocketAddressImpl	file:	access:public	signature:() const
SocketAddressImpl::host	SocketAddress.cc	/^  virtual IPAddress host() const = 0;$/;"	p	class:SocketAddressImpl	file:	access:public	signature:() const
SocketAddressImpl::length	SocketAddress.cc	/^  virtual socklen_t length() const = 0;$/;"	p	class:SocketAddressImpl	file:	access:public	signature:() const
SocketAddressImpl::operator =	SocketAddress.cc	/^  SocketAddressImpl& operator= (const SocketAddressImpl&);$/;"	p	class:SocketAddressImpl	file:	access:private	signature:(const SocketAddressImpl&)
SocketAddressImpl::port	SocketAddress.cc	/^  virtual uint16_t port() const = 0;$/;"	p	class:SocketAddressImpl	file:	access:public	signature:() const
SocketAddressImpl::~SocketAddressImpl	SocketAddress.cc	/^  ~SocketAddressImpl() {$/;"	f	class:SocketAddressImpl	access:protected	signature:()
SocketImpl	SocketImpl.cc	/^SocketImpl::SocketImpl() : sockfd_(-1), blocking_(true){$/;"	f	class:SocketImpl	signature:()
SocketImpl	SocketImpl.cc	/^SocketImpl::SocketImpl(int sockfd) : sockfd_(-1), blocking_(true){$/;"	f	class:SocketImpl	signature:(int sockfd)
SocketImpl	SocketImpl.h	/^  SocketImpl();$/;"	p	class:SocketImpl	access:protected	signature:()
SocketImpl	SocketImpl.h	/^  SocketImpl(const SocketImpl& );$/;"	p	class:SocketImpl	access:private	signature:(const SocketImpl& )
SocketImpl	SocketImpl.h	/^  SocketImpl(int sockfd);$/;"	p	class:SocketImpl	access:protected	signature:(int sockfd)
SocketImpl	SocketImpl.h	/^class SocketImpl : public RefCountedObject {$/;"	c	inherits:RefCountedObject
SocketImpl::SELECT_ERROR	SocketImpl.h	/^    SELECT_ERROR = 4$/;"	e	enum:SocketImpl::SelectMode
SocketImpl::SELECT_READ	SocketImpl.h	/^    SELECT_READ = 1,$/;"	e	enum:SocketImpl::SelectMode
SocketImpl::SELECT_WRITE	SocketImpl.h	/^    SELECT_WRITE = 2,$/;"	e	enum:SocketImpl::SelectMode
SocketImpl::SelectMode	SocketImpl.h	/^  enum SelectMode {$/;"	g	class:SocketImpl	access:public
SocketImpl::SocketImpl	SocketImpl.cc	/^SocketImpl::SocketImpl() : sockfd_(-1), blocking_(true){$/;"	f	class:SocketImpl	signature:()
SocketImpl::SocketImpl	SocketImpl.cc	/^SocketImpl::SocketImpl(int sockfd) : sockfd_(-1), blocking_(true){$/;"	f	class:SocketImpl	signature:(int sockfd)
SocketImpl::SocketImpl	SocketImpl.h	/^  SocketImpl();$/;"	p	class:SocketImpl	access:protected	signature:()
SocketImpl::SocketImpl	SocketImpl.h	/^  SocketImpl(const SocketImpl& );$/;"	p	class:SocketImpl	access:private	signature:(const SocketImpl& )
SocketImpl::SocketImpl	SocketImpl.h	/^  SocketImpl(int sockfd);$/;"	p	class:SocketImpl	access:protected	signature:(int sockfd)
SocketImpl::acceptConnection	SocketImpl.cc	/^SocketImpl* SocketImpl::acceptConnection(SocketAddress& clientAddr) {$/;"	f	class:SocketImpl	signature:(SocketAddress& clientAddr)
SocketImpl::acceptConnection	SocketImpl.h	/^  virtual SocketImpl* acceptConnection(SocketAddress& clientAddr);$/;"	p	class:SocketImpl	access:public	signature:(SocketAddress& clientAddr)
SocketImpl::address	SocketImpl.cc	/^SocketAddress SocketImpl::address() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::address	SocketImpl.h	/^  virtual SocketAddress address();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::available	SocketImpl.cc	/^int SocketImpl::available() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::available	SocketImpl.h	/^  virtual int available();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::bind	SocketImpl.cc	/^void SocketImpl::bind(const SocketAddress& address,$/;"	f	class:SocketImpl	signature:(const SocketAddress& address, bool reuseAddress)
SocketImpl::bind	SocketImpl.h	/^  virtual void bind(const SocketAddress& address, bool reuseAddress = false);$/;"	p	class:SocketImpl	access:public	signature:(const SocketAddress& address, bool reuseAddress = false)
SocketImpl::blocking_	SocketImpl.h	/^  bool blocking_;$/;"	m	class:SocketImpl	access:private
SocketImpl::close	SocketImpl.cc	/^void SocketImpl::close() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::close	SocketImpl.h	/^  virtual void close();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::connect	SocketImpl.cc	/^void SocketImpl::connect(const SocketAddress& address) {$/;"	f	class:SocketImpl	signature:(const SocketAddress& address)
SocketImpl::connect	SocketImpl.cc	/^void SocketImpl::connect(const SocketAddress& address,$/;"	f	class:SocketImpl	signature:(const SocketAddress& address, const Timespan& timespan)
SocketImpl::connect	SocketImpl.h	/^  virtual void connect(const SocketAddress& address);$/;"	p	class:SocketImpl	access:public	signature:(const SocketAddress& address)
SocketImpl::connect	SocketImpl.h	/^  virtual void connect(const SocketAddress& address,$/;"	p	class:SocketImpl	access:public	signature:(const SocketAddress& address, const Timespan& timespan)
SocketImpl::connectNB	SocketImpl.cc	/^void SocketImpl::connectNB(const SocketAddress& address) {$/;"	f	class:SocketImpl	signature:(const SocketAddress& address)
SocketImpl::connectNB	SocketImpl.h	/^  virtual void connectNB(const SocketAddress& address);$/;"	p	class:SocketImpl	access:public	signature:(const SocketAddress& address)
SocketImpl::error	SocketImpl.cc	/^void SocketImpl::error() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::error	SocketImpl.cc	/^void SocketImpl::error(const std::string& arg) {$/;"	f	class:SocketImpl	signature:(const std::string& arg)
SocketImpl::error	SocketImpl.cc	/^void SocketImpl::error(int code) {$/;"	f	class:SocketImpl	signature:(int code)
SocketImpl::error	SocketImpl.cc	/^void SocketImpl::error(int code, const std::string& arg) {$/;"	f	class:SocketImpl	signature:(int code, const std::string& arg)
SocketImpl::error	SocketImpl.h	/^  static void error();$/;"	p	class:SocketImpl	access:protected	signature:()
SocketImpl::error	SocketImpl.h	/^  static void error(const std::string& arg);$/;"	p	class:SocketImpl	access:protected	signature:(const std::string& arg)
SocketImpl::error	SocketImpl.h	/^  static void error(int code);$/;"	p	class:SocketImpl	access:protected	signature:(int code)
SocketImpl::error	SocketImpl.h	/^  static void error(int code, const std::string& arg);$/;"	p	class:SocketImpl	access:protected	signature:(int code, const std::string& arg)
SocketImpl::getBlocking	SocketImpl.h	/^  virtual bool getBlocking() const;$/;"	p	class:SocketImpl	access:public	signature:() const
SocketImpl::getBlocking	SocketImpl.h	/^inline bool SocketImpl::getBlocking() const {$/;"	f	class:SocketImpl	signature:() const
SocketImpl::getBroadcast	SocketImpl.cc	/^bool SocketImpl::getBroadcast() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::getBroadcast	SocketImpl.h	/^  bool getBroadcast();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::getKeepAlive	SocketImpl.cc	/^bool SocketImpl::getKeepAlive() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::getKeepAlive	SocketImpl.h	/^  bool getKeepAlive();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::getLinger	SocketImpl.cc	/^void SocketImpl::getLinger(bool& on, int& seconds) {$/;"	f	class:SocketImpl	signature:(bool& on, int& seconds)
SocketImpl::getLinger	SocketImpl.h	/^  void getLinger(bool& on, int& seconds);$/;"	p	class:SocketImpl	access:public	signature:(bool& on, int& seconds)
SocketImpl::getNoDelay	SocketImpl.cc	/^bool SocketImpl::getNoDelay() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::getNoDelay	SocketImpl.h	/^  bool getNoDelay();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::getOOBInline	SocketImpl.cc	/^bool SocketImpl::getOOBInline() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::getOOBInline	SocketImpl.h	/^  bool getOOBInline();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::getOption	SocketImpl.cc	/^void SocketImpl::getOption(int level, int option, IPAddress& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, IPAddress& value)
SocketImpl::getOption	SocketImpl.cc	/^void SocketImpl::getOption(int level, int option, Timespan& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, Timespan& value)
SocketImpl::getOption	SocketImpl.cc	/^void SocketImpl::getOption(int level, int option, int& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, int& value)
SocketImpl::getOption	SocketImpl.cc	/^void SocketImpl::getOption(int level, int option, unsigned char& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, unsigned char& value)
SocketImpl::getOption	SocketImpl.cc	/^void SocketImpl::getOption(int level, int option, unsigned& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, unsigned& value)
SocketImpl::getOption	SocketImpl.h	/^  void getOption(int level, int option, IPAddress& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, IPAddress& value)
SocketImpl::getOption	SocketImpl.h	/^  void getOption(int level, int option, Timespan& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, Timespan& value)
SocketImpl::getOption	SocketImpl.h	/^  void getOption(int level, int option, int& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, int& value)
SocketImpl::getOption	SocketImpl.h	/^  void getOption(int level, int option, unsigned char & value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, unsigned char & value)
SocketImpl::getOption	SocketImpl.h	/^  void getOption(int level, int option, unsigned& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, unsigned& value)
SocketImpl::getRawOption	SocketImpl.cc	/^void SocketImpl::getRawOption(int level, int option, void* value,$/;"	f	class:SocketImpl	signature:(int level, int option, void* value, socklen_t& length)
SocketImpl::getRawOption	SocketImpl.h	/^  virtual void getRawOption(int level, int option, void* value,$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, void* value, socklen_t& length)
SocketImpl::getReceiveBufferSize	SocketImpl.cc	/^int SocketImpl::getReceiveBufferSize() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::getReceiveBufferSize	SocketImpl.h	/^  virtual int getReceiveBufferSize();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::getReceiveTimeout	SocketImpl.cc	/^Timespan SocketImpl::getReceiveTimeout() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::getReceiveTimeout	SocketImpl.h	/^  virtual Timespan getReceiveTimeout();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::getReuseAddress	SocketImpl.cc	/^bool SocketImpl::getReuseAddress() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::getReuseAddress	SocketImpl.h	/^  bool getReuseAddress();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::getReusePort	SocketImpl.cc	/^bool SocketImpl::getReusePort() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::getReusePort	SocketImpl.h	/^  bool getReusePort();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::getSendBufferSize	SocketImpl.cc	/^int SocketImpl::getSendBufferSize() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::getSendBufferSize	SocketImpl.h	/^  virtual int getSendBufferSize();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::getSendTimeout	SocketImpl.cc	/^Timespan SocketImpl::getSendTimeout() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::getSendTimeout	SocketImpl.h	/^  virtual Timespan getSendTimeout();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::init	SocketImpl.cc	/^void SocketImpl::init(int af) {$/;"	f	class:SocketImpl	signature:(int af)
SocketImpl::init	SocketImpl.h	/^  virtual void init(int af);$/;"	p	class:SocketImpl	access:protected	signature:(int af)
SocketImpl::initSocket	SocketImpl.cc	/^void SocketImpl::initSocket(int af, int type, int proto) {$/;"	f	class:SocketImpl	signature:(int af, int type, int proto)
SocketImpl::initSocket	SocketImpl.h	/^  virtual void initSocket(int af, int type, int proto = 0);$/;"	p	class:SocketImpl	access:protected	signature:(int af, int type, int proto = 0)
SocketImpl::initialized	SocketImpl.h	/^  bool initialized() const;$/;"	p	class:SocketImpl	access:public	signature:() const
SocketImpl::initialized	SocketImpl.h	/^inline bool SocketImpl::initialized() const{$/;"	f	class:SocketImpl	signature:() const
SocketImpl::ioctl	SocketImpl.cc	/^void SocketImpl::ioctl(int request, int& arg) {$/;"	f	class:SocketImpl	signature:(int request, int& arg)
SocketImpl::ioctl	SocketImpl.cc	/^void SocketImpl::ioctl(int request, void* arg) {$/;"	f	class:SocketImpl	signature:(int request, void* arg)
SocketImpl::ioctl	SocketImpl.h	/^  void ioctl(int request, int& arg);$/;"	p	class:SocketImpl	access:public	signature:(int request, int& arg)
SocketImpl::ioctl	SocketImpl.h	/^  void ioctl(int request, void* arg);$/;"	p	class:SocketImpl	access:public	signature:(int request, void* arg)
SocketImpl::lastError	SocketImpl.h	/^  static int lastError();$/;"	p	class:SocketImpl	access:protected	signature:()
SocketImpl::lastError	SocketImpl.h	/^inline int SocketImpl::lastError() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::listen	SocketImpl.cc	/^void SocketImpl::listen(int backlog) {$/;"	f	class:SocketImpl	signature:(int backlog)
SocketImpl::listen	SocketImpl.h	/^  virtual void listen(int backlog = 64);$/;"	p	class:SocketImpl	access:public	signature:(int backlog = 64)
SocketImpl::operator =	SocketImpl.h	/^  SocketImpl& operator = (const SocketImpl&);$/;"	p	class:SocketImpl	access:private	signature:(const SocketImpl&)
SocketImpl::peerAddress	SocketImpl.cc	/^SocketAddress SocketImpl::peerAddress() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::peerAddress	SocketImpl.h	/^  virtual SocketAddress peerAddress();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::poll	SocketImpl.cc	/^bool SocketImpl::poll(const Timespan& timeout, int mode) {$/;"	f	class:SocketImpl	signature:(const Timespan& timeout, int mode)
SocketImpl::poll	SocketImpl.h	/^  virtual bool poll(const Timespan& timeout, int mode);$/;"	p	class:SocketImpl	access:public	signature:(const Timespan& timeout, int mode)
SocketImpl::receiveBytes	SocketImpl.cc	/^int SocketImpl::receiveBytes(void* buffer, int length, int flags) {$/;"	f	class:SocketImpl	signature:(void* buffer, int length, int flags)
SocketImpl::receiveBytes	SocketImpl.h	/^  virtual int receiveBytes(void* buffer, int length, int flags = 0);$/;"	p	class:SocketImpl	access:public	signature:(void* buffer, int length, int flags = 0)
SocketImpl::receiveFrom	SocketImpl.cc	/^int SocketImpl::receiveFrom(void* buffer, int length, SocketAddress& address,$/;"	f	class:SocketImpl	signature:(void* buffer, int length, SocketAddress& address, int flags)
SocketImpl::receiveFrom	SocketImpl.h	/^  virtual int receiveFrom(void* buffer, int length, SocketAddress& address,$/;"	p	class:SocketImpl	access:public	signature:(void* buffer, int length, SocketAddress& address, int flags = 0)
SocketImpl::recvTimeout_	SocketImpl.h	/^  Timespan recvTimeout_;$/;"	m	class:SocketImpl	access:private
SocketImpl::reset	SocketImpl.cc	/^void SocketImpl::reset(int fd) {$/;"	f	class:SocketImpl	signature:(int fd)
SocketImpl::reset	SocketImpl.h	/^  void reset(int fd = -1);$/;"	p	class:SocketImpl	access:protected	signature:(int fd = -1)
SocketImpl::sendBytes	SocketImpl.cc	/^int SocketImpl::sendBytes(const void* buffer, int length,$/;"	f	class:SocketImpl	signature:(const void* buffer, int length, int flags)
SocketImpl::sendBytes	SocketImpl.h	/^  virtual int sendBytes(const void* buffer, int length, int flags = 0);$/;"	p	class:SocketImpl	access:public	signature:(const void* buffer, int length, int flags = 0)
SocketImpl::sendTimeout_	SocketImpl.h	/^  Timespan sendTimeout_;$/;"	m	class:SocketImpl	access:private
SocketImpl::sendTo	SocketImpl.cc	/^int SocketImpl::sendTo(const void* buffer, int length,$/;"	f	class:SocketImpl	signature:(const void* buffer, int length, const SocketAddress& address, int flags)
SocketImpl::sendTo	SocketImpl.h	/^  virtual int sendTo(const void* buffer, int length,$/;"	p	class:SocketImpl	access:public	signature:(const void* buffer, int length, const SocketAddress& address, int flags = 0)
SocketImpl::sendUrgent	SocketImpl.cc	/^void SocketImpl::sendUrgent(unsigned char data) {$/;"	f	class:SocketImpl	signature:(unsigned char data)
SocketImpl::sendUrgent	SocketImpl.h	/^  virtual void sendUrgent(unsigned char data);$/;"	p	class:SocketImpl	access:public	signature:(unsigned char data)
SocketImpl::setBlocking	SocketImpl.cc	/^void SocketImpl::setBlocking(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
SocketImpl::setBlocking	SocketImpl.h	/^  virtual void setBlocking(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
SocketImpl::setBroadcast	SocketImpl.cc	/^void SocketImpl::setBroadcast(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
SocketImpl::setBroadcast	SocketImpl.h	/^  void setBroadcast(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
SocketImpl::setKeepAlive	SocketImpl.cc	/^void SocketImpl::setKeepAlive(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
SocketImpl::setKeepAlive	SocketImpl.h	/^  void setKeepAlive(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
SocketImpl::setLinger	SocketImpl.cc	/^void SocketImpl::setLinger(bool on, int seconds) {$/;"	f	class:SocketImpl	signature:(bool on, int seconds)
SocketImpl::setLinger	SocketImpl.h	/^  void setLinger(bool on, int seconds);$/;"	p	class:SocketImpl	access:public	signature:(bool on, int seconds)
SocketImpl::setNoDelay	SocketImpl.cc	/^void SocketImpl::setNoDelay(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
SocketImpl::setNoDelay	SocketImpl.h	/^  void setNoDelay(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
SocketImpl::setOOBInline	SocketImpl.cc	/^void SocketImpl::setOOBInline(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
SocketImpl::setOOBInline	SocketImpl.h	/^  void setOOBInline(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
SocketImpl::setOption	SocketImpl.cc	/^void SocketImpl::setOption(int level, int option, const IPAddress& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, const IPAddress& value)
SocketImpl::setOption	SocketImpl.cc	/^void SocketImpl::setOption(int level, int option, const Timespan& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, const Timespan& value)
SocketImpl::setOption	SocketImpl.cc	/^void SocketImpl::setOption(int level, int option, int value) {$/;"	f	class:SocketImpl	signature:(int level, int option, int value)
SocketImpl::setOption	SocketImpl.cc	/^void SocketImpl::setOption(int level, int option, unsigned char value) {$/;"	f	class:SocketImpl	signature:(int level, int option, unsigned char value)
SocketImpl::setOption	SocketImpl.cc	/^void SocketImpl::setOption(int level, int option, unsigned value) {$/;"	f	class:SocketImpl	signature:(int level, int option, unsigned value)
SocketImpl::setOption	SocketImpl.h	/^  void setOption(int level, int option, const IPAddress& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, const IPAddress& value)
SocketImpl::setOption	SocketImpl.h	/^  void setOption(int level, int option, const Timespan& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, const Timespan& value)
SocketImpl::setOption	SocketImpl.h	/^  void setOption(int level, int option, int value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, int value)
SocketImpl::setOption	SocketImpl.h	/^  void setOption(int level, int option, unsigned char value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, unsigned char value)
SocketImpl::setOption	SocketImpl.h	/^  void setOption(int level, int option, unsigned value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, unsigned value)
SocketImpl::setRawOption	SocketImpl.cc	/^void SocketImpl::setRawOption(int level, int option, const void* value,$/;"	f	class:SocketImpl	signature:(int level, int option, const void* value, socklen_t length)
SocketImpl::setRawOption	SocketImpl.h	/^  virtual void setRawOption(int level, int option, const void* value,$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, const void* value, socklen_t length)
SocketImpl::setReceiveBufferSize	SocketImpl.cc	/^void SocketImpl::setReceiveBufferSize(int size) {$/;"	f	class:SocketImpl	signature:(int size)
SocketImpl::setReceiveBufferSize	SocketImpl.h	/^  virtual void setReceiveBufferSize(int size);$/;"	p	class:SocketImpl	access:public	signature:(int size)
SocketImpl::setReceiveTimeout	SocketImpl.cc	/^void SocketImpl::setReceiveTimeout(const Timespan& timeout)  {$/;"	f	class:SocketImpl	signature:(const Timespan& timeout)
SocketImpl::setReceiveTimeout	SocketImpl.h	/^  virtual void setReceiveTimeout(const Timespan& timeout);$/;"	p	class:SocketImpl	access:public	signature:(const Timespan& timeout)
SocketImpl::setReuseAddress	SocketImpl.cc	/^void SocketImpl::setReuseAddress(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
SocketImpl::setReuseAddress	SocketImpl.h	/^  void setReuseAddress(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
SocketImpl::setReusePort	SocketImpl.cc	/^void SocketImpl::setReusePort(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
SocketImpl::setReusePort	SocketImpl.h	/^  void setReusePort(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
SocketImpl::setSendBufferSize	SocketImpl.cc	/^void SocketImpl::setSendBufferSize(int size) {$/;"	f	class:SocketImpl	signature:(int size)
SocketImpl::setSendBufferSize	SocketImpl.h	/^  virtual void setSendBufferSize(int size);$/;"	p	class:SocketImpl	access:public	signature:(int size)
SocketImpl::setSendTimeout	SocketImpl.cc	/^void SocketImpl::setSendTimeout(const Timespan& timeout) {$/;"	f	class:SocketImpl	signature:(const Timespan& timeout)
SocketImpl::setSendTimeout	SocketImpl.h	/^  virtual void setSendTimeout(const Timespan& timeout);$/;"	p	class:SocketImpl	access:public	signature:(const Timespan& timeout)
SocketImpl::shutdown	SocketImpl.cc	/^void SocketImpl::shutdown() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::shutdown	SocketImpl.h	/^  virtual void shutdown();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::shutdownReceive	SocketImpl.cc	/^void SocketImpl::shutdownReceive() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::shutdownReceive	SocketImpl.h	/^  virtual void shutdownReceive();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::shutdownSend	SocketImpl.cc	/^void SocketImpl::shutdownSend() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::shutdownSend	SocketImpl.h	/^  virtual void shutdownSend();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::socketError	SocketImpl.cc	/^int SocketImpl::socketError() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::socketError	SocketImpl.h	/^  int socketError();$/;"	p	class:SocketImpl	access:public	signature:()
SocketImpl::sockfd	SocketImpl.h	/^  int sockfd() const;$/;"	p	class:SocketImpl	access:public	signature:() const
SocketImpl::sockfd	SocketImpl.h	/^inline int SocketImpl::sockfd() const{$/;"	f	class:SocketImpl	signature:() const
SocketImpl::sockfd_	SocketImpl.h	/^  int sockfd_;$/;"	m	class:SocketImpl	access:private
SocketImpl::~SocketImpl	SocketImpl.cc	/^SocketImpl::~SocketImpl() {$/;"	f	class:SocketImpl	signature:()
SocketImpl::~SocketImpl	SocketImpl.h	/^  virtual ~SocketImpl();$/;"	p	class:SocketImpl	access:protected	signature:()
SocketList	Socket.h	/^  typedef std::vector<Socket> SocketList;$/;"	t	class:Socket	access:public
SocketNotification	SocketNotification.cc	/^SocketNotification::SocketNotification(SocketReactor* pReactor)$/;"	f	class:SocketNotification	signature:(SocketReactor* pReactor)
SocketNotification	SocketNotification.h	/^  explicit SocketNotification(SocketReactor* pReactor);$/;"	p	class:SocketNotification	access:public	signature:(SocketReactor* pReactor)
SocketNotification	SocketNotification.h	/^class SocketNotification : public Notification {$/;"	c	inherits:Notification
SocketNotification::SocketNotification	SocketNotification.cc	/^SocketNotification::SocketNotification(SocketReactor* pReactor)$/;"	f	class:SocketNotification	signature:(SocketReactor* pReactor)
SocketNotification::SocketNotification	SocketNotification.h	/^  explicit SocketNotification(SocketReactor* pReactor);$/;"	p	class:SocketNotification	access:public	signature:(SocketReactor* pReactor)
SocketNotification::pReactor_	SocketNotification.h	/^  SocketReactor * pReactor_;$/;"	m	class:SocketNotification	access:private
SocketNotification::setSocket	SocketNotification.cc	/^void SocketNotification::setSocket(const Socket& socket) {$/;"	f	class:SocketNotification	signature:(const Socket& socket)
SocketNotification::setSocket	SocketNotification.h	/^  void setSocket(const Socket& socket);$/;"	p	class:SocketNotification	access:private	signature:(const Socket& socket)
SocketNotification::socket	SocketNotification.h	/^  Socket& socket();$/;"	p	class:SocketNotification	access:public	signature:()
SocketNotification::socket	SocketNotification.h	/^inline Socket& SocketNotification::socket() {$/;"	f	class:SocketNotification	signature:()
SocketNotification::socket_	SocketNotification.h	/^  Socket socket_;$/;"	m	class:SocketNotification	access:private
SocketNotification::source	SocketNotification.h	/^  SocketReactor& source();$/;"	p	class:SocketNotification	access:public	signature:()
SocketNotification::source	SocketNotification.h	/^inline SocketReactor& SocketNotification::source() {$/;"	f	class:SocketNotification	signature:()
SocketNotification::~SocketNotification	SocketNotification.cc	/^SocketNotification::~SocketNotification(){$/;"	f	class:SocketNotification	signature:()
SocketNotification::~SocketNotification	SocketNotification.h	/^  virtual ~SocketNotification();$/;"	p	class:SocketNotification	access:public	signature:()
StreamSocketImpl	StreamSocketImpl.cc	/^StreamSocketImpl::StreamSocketImpl() {$/;"	f	class:StreamSocketImpl	signature:()
StreamSocketImpl	StreamSocketImpl.cc	/^StreamSocketImpl::StreamSocketImpl(IPAddress::Family addressFamily) {$/;"	f	class:StreamSocketImpl	signature:(IPAddress::Family addressFamily)
StreamSocketImpl	StreamSocketImpl.cc	/^StreamSocketImpl::StreamSocketImpl(int sockfd) : SocketImpl(sockfd) {$/;"	f	class:StreamSocketImpl	signature:(int sockfd)
StreamSocketImpl	StreamSocketImpl.h	/^  StreamSocketImpl();$/;"	p	class:StreamSocketImpl	access:public	signature:()
StreamSocketImpl	StreamSocketImpl.h	/^  StreamSocketImpl(int sockfd);$/;"	p	class:StreamSocketImpl	access:public	signature:(int sockfd)
StreamSocketImpl	StreamSocketImpl.h	/^  explicit StreamSocketImpl(IPAddress::Family addressFamily);$/;"	p	class:StreamSocketImpl	access:public	signature:(IPAddress::Family addressFamily)
StreamSocketImpl	StreamSocketImpl.h	/^class StreamSocketImpl : public SocketImpl{$/;"	c	inherits:SocketImpl
StreamSocketImpl::StreamSocketImpl	StreamSocketImpl.cc	/^StreamSocketImpl::StreamSocketImpl() {$/;"	f	class:StreamSocketImpl	signature:()
StreamSocketImpl::StreamSocketImpl	StreamSocketImpl.cc	/^StreamSocketImpl::StreamSocketImpl(IPAddress::Family addressFamily) {$/;"	f	class:StreamSocketImpl	signature:(IPAddress::Family addressFamily)
StreamSocketImpl::StreamSocketImpl	StreamSocketImpl.cc	/^StreamSocketImpl::StreamSocketImpl(int sockfd) : SocketImpl(sockfd) {$/;"	f	class:StreamSocketImpl	signature:(int sockfd)
StreamSocketImpl::StreamSocketImpl	StreamSocketImpl.h	/^  StreamSocketImpl();$/;"	p	class:StreamSocketImpl	access:public	signature:()
StreamSocketImpl::StreamSocketImpl	StreamSocketImpl.h	/^  StreamSocketImpl(int sockfd);$/;"	p	class:StreamSocketImpl	access:public	signature:(int sockfd)
StreamSocketImpl::StreamSocketImpl	StreamSocketImpl.h	/^  explicit StreamSocketImpl(IPAddress::Family addressFamily);$/;"	p	class:StreamSocketImpl	access:public	signature:(IPAddress::Family addressFamily)
StreamSocketImpl::sendBytes	StreamSocketImpl.cc	/^int StreamSocketImpl::sendBytes(const void* buffer, int length,$/;"	f	class:StreamSocketImpl	signature:(const void* buffer, int length, int flags)
StreamSocketImpl::sendBytes	StreamSocketImpl.h	/^  virtual int sendBytes(const void* buffer, int length, int flags = 0);$/;"	p	class:StreamSocketImpl	access:public	signature:(const void* buffer, int length, int flags = 0)
StreamSocketImpl::~StreamSocketImpl	StreamSocketImpl.cc	/^StreamSocketImpl::~StreamSocketImpl() {$/;"	f	class:StreamSocketImpl	signature:()
StreamSocketImpl::~StreamSocketImpl	StreamSocketImpl.h	/^  virtual ~StreamSocketImpl();$/;"	p	class:StreamSocketImpl	access:protected	signature:()
TIMESPAN_H	Timespan.h	2;"	d
TIMESTAMP_H	Timestamp.h	2;"	d
TimeDiff	Timespan.h	/^  typedef Timestamp::TimeDiff  TimeDiff;$/;"	t	class:Timespan	access:public
TimeDiff	Timestamp.h	/^  typedef int64_t TimeDiff;$/;"	t	class:Timestamp	access:public
TimeVal	Timestamp.h	/^  typedef int64_t TimeVal;$/;"	t	class:Timestamp	access:public
TimeoutNotification	SocketNotification.cc	/^TimeoutNotification::TimeoutNotification($/;"	f	class:TimeoutNotification	signature:( SocketReactor* pReactor)
TimeoutNotification	SocketNotification.h	/^  TimeoutNotification(SocketReactor* pReactor);$/;"	p	class:TimeoutNotification	access:public	signature:(SocketReactor* pReactor)
TimeoutNotification	SocketNotification.h	/^class TimeoutNotification : public SocketNotification {$/;"	c	inherits:SocketNotification
TimeoutNotification::TimeoutNotification	SocketNotification.cc	/^TimeoutNotification::TimeoutNotification($/;"	f	class:TimeoutNotification	signature:( SocketReactor* pReactor)
TimeoutNotification::TimeoutNotification	SocketNotification.h	/^  TimeoutNotification(SocketReactor* pReactor);$/;"	p	class:TimeoutNotification	access:public	signature:(SocketReactor* pReactor)
TimeoutNotification::~TimeoutNotification	SocketNotification.cc	/^TimeoutNotification::~TimeoutNotification() {$/;"	f	class:TimeoutNotification	signature:()
TimeoutNotification::~TimeoutNotification	SocketNotification.h	/^  ~TimeoutNotification();$/;"	p	class:TimeoutNotification	access:public	signature:()
Timespan	Timespan.cc	/^Timespan::Timespan() : span_(0) {$/;"	f	class:Timespan	signature:()
Timespan	Timespan.cc	/^Timespan::Timespan(TimeDiff microseconds) : span_(microseconds) {$/;"	f	class:Timespan	signature:(TimeDiff microseconds)
Timespan	Timespan.cc	/^Timespan::Timespan(const Timespan& timespan) : span_(timespan.span_) {$/;"	f	class:Timespan	signature:(const Timespan& timespan)
Timespan	Timespan.cc	/^Timespan::Timespan(int days, int hours, int minutes, int seconds,$/;"	f	class:Timespan	signature:(int days, int hours, int minutes, int seconds, int microseconds)
Timespan	Timespan.cc	/^Timespan::Timespan(long seconds, long microseconds) : $/;"	f	class:Timespan	signature:(long seconds, long microseconds)
Timespan	Timespan.h	/^  Timespan();$/;"	p	class:Timespan	access:public	signature:()
Timespan	Timespan.h	/^  Timespan(TimeDiff microseconds);$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds)
Timespan	Timespan.h	/^  Timespan(const Timespan& timespan);$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan)
Timespan	Timespan.h	/^  Timespan(int days, int hours, int minutes,$/;"	p	class:Timespan	access:public	signature:(int days, int hours, int minutes, int seconds, int microseconds)
Timespan	Timespan.h	/^  Timespan(long seconds, long microseconds);$/;"	p	class:Timespan	access:public	signature:(long seconds, long microseconds)
Timespan	Timespan.h	/^class Timespan {$/;"	c
Timespan::DAYS	Timespan.cc	/^const Timespan::TimeDiff Timespan::DAYS =$/;"	m	class:Timespan	file:
Timespan::DAYS	Timespan.h	/^  static const TimeDiff DAYS;$/;"	m	class:Timespan	access:public
Timespan::HOURS	Timespan.cc	/^const Timespan::TimeDiff Timespan::HOURS = $/;"	m	class:Timespan	file:
Timespan::HOURS	Timespan.h	/^  static const TimeDiff HOURS;$/;"	m	class:Timespan	access:public
Timespan::MILLISECONDS	Timespan.cc	/^const Timespan::TimeDiff Timespan::MILLISECONDS = 1000;$/;"	m	class:Timespan	file:
Timespan::MILLISECONDS	Timespan.h	/^  static const TimeDiff MILLISECONDS;$/;"	m	class:Timespan	access:public
Timespan::MINUTES	Timespan.cc	/^const Timespan::TimeDiff Timespan::MINUTES = $/;"	m	class:Timespan	file:
Timespan::MINUTES	Timespan.h	/^  static const TimeDiff MINUTES;$/;"	m	class:Timespan	access:public
Timespan::SECONDS	Timespan.cc	/^const Timespan::TimeDiff Timespan::SECONDS = $/;"	m	class:Timespan	file:
Timespan::SECONDS	Timespan.h	/^  static const TimeDiff SECONDS;$/;"	m	class:Timespan	access:public
Timespan::TimeDiff	Timespan.h	/^  typedef Timestamp::TimeDiff  TimeDiff;$/;"	t	class:Timespan	access:public
Timespan::Timespan	Timespan.cc	/^Timespan::Timespan() : span_(0) {$/;"	f	class:Timespan	signature:()
Timespan::Timespan	Timespan.cc	/^Timespan::Timespan(TimeDiff microseconds) : span_(microseconds) {$/;"	f	class:Timespan	signature:(TimeDiff microseconds)
Timespan::Timespan	Timespan.cc	/^Timespan::Timespan(const Timespan& timespan) : span_(timespan.span_) {$/;"	f	class:Timespan	signature:(const Timespan& timespan)
Timespan::Timespan	Timespan.cc	/^Timespan::Timespan(int days, int hours, int minutes, int seconds,$/;"	f	class:Timespan	signature:(int days, int hours, int minutes, int seconds, int microseconds)
Timespan::Timespan	Timespan.cc	/^Timespan::Timespan(long seconds, long microseconds) : $/;"	f	class:Timespan	signature:(long seconds, long microseconds)
Timespan::Timespan	Timespan.h	/^  Timespan();$/;"	p	class:Timespan	access:public	signature:()
Timespan::Timespan	Timespan.h	/^  Timespan(TimeDiff microseconds);$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds)
Timespan::Timespan	Timespan.h	/^  Timespan(const Timespan& timespan);$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan)
Timespan::Timespan	Timespan.h	/^  Timespan(int days, int hours, int minutes,$/;"	p	class:Timespan	access:public	signature:(int days, int hours, int minutes, int seconds, int microseconds)
Timespan::Timespan	Timespan.h	/^  Timespan(long seconds, long microseconds);$/;"	p	class:Timespan	access:public	signature:(long seconds, long microseconds)
Timespan::assign	Timespan.cc	/^Timespan& Timespan::assign(int days, int hours, int minutes, int seconds,$/;"	f	class:Timespan	signature:(int days, int hours, int minutes, int seconds, int microseconds)
Timespan::assign	Timespan.cc	/^Timespan& Timespan::assign(long seconds, long microseconds) {$/;"	f	class:Timespan	signature:(long seconds, long microseconds)
Timespan::assign	Timespan.h	/^  Timespan& assign(int days, int hours, int minutes, int seconds,$/;"	p	class:Timespan	access:public	signature:(int days, int hours, int minutes, int seconds, int microseconds)
Timespan::assign	Timespan.h	/^  Timespan& assign(long seconds, long microseconds);$/;"	p	class:Timespan	access:public	signature:(long seconds, long microseconds)
Timespan::days	Timespan.h	/^  int days() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::days	Timespan.h	/^inline int Timespan::days() const {$/;"	f	class:Timespan	signature:() const
Timespan::hours	Timespan.h	/^  int hours() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::hours	Timespan.h	/^inline int Timespan::hours() const {$/;"	f	class:Timespan	signature:() const
Timespan::microseconds	Timespan.h	/^  int microseconds() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::microseconds	Timespan.h	/^inline int Timespan::microseconds() const{$/;"	f	class:Timespan	signature:() const
Timespan::milliseconds	Timespan.h	/^  int milliseconds() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::milliseconds	Timespan.h	/^inline int Timespan::milliseconds() const {$/;"	f	class:Timespan	signature:() const
Timespan::minutes	Timespan.h	/^  int minutes() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::minutes	Timespan.h	/^inline int Timespan::minutes() const {$/;"	f	class:Timespan	signature:() const
Timespan::operator !=	Timespan.h	/^  bool operator!= (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
Timespan::operator !=	Timespan.h	/^  bool operator!= (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
Timespan::operator !=	Timespan.h	/^inline bool Timespan::operator!= (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
Timespan::operator !=	Timespan.h	/^inline bool Timespan::operator!= (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
Timespan::operator +	Timespan.cc	/^Timespan Timespan::operator + (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
Timespan::operator +	Timespan.cc	/^Timespan Timespan::operator + (const Timespan& d) const {$/;"	f	class:Timespan	signature:(const Timespan& d) const
Timespan::operator +	Timespan.h	/^  Timespan operator + (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
Timespan::operator +	Timespan.h	/^  Timespan operator + (const Timespan& d) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& d) const
Timespan::operator +=	Timespan.cc	/^Timespan& Timespan::operator += (TimeDiff microseconds) {$/;"	f	class:Timespan	signature:(TimeDiff microseconds)
Timespan::operator +=	Timespan.cc	/^Timespan& Timespan::operator += (const Timespan& d) {$/;"	f	class:Timespan	signature:(const Timespan& d)
Timespan::operator +=	Timespan.h	/^  Timespan& operator += (TimeDiff microseconds);$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds)
Timespan::operator +=	Timespan.h	/^  Timespan& operator += (const Timespan& d);$/;"	p	class:Timespan	access:public	signature:(const Timespan& d)
Timespan::operator -	Timespan.cc	/^Timespan Timespan::operator - (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
Timespan::operator -	Timespan.cc	/^Timespan Timespan::operator - (const Timespan& d) const {$/;"	f	class:Timespan	signature:(const Timespan& d) const
Timespan::operator -	Timespan.h	/^  Timespan operator - (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
Timespan::operator -	Timespan.h	/^  Timespan operator - (const Timespan& d) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& d) const
Timespan::operator -=	Timespan.cc	/^Timespan& Timespan::operator -= (TimeDiff microseconds) {$/;"	f	class:Timespan	signature:(TimeDiff microseconds)
Timespan::operator -=	Timespan.cc	/^Timespan& Timespan::operator -= (const Timespan& d) {$/;"	f	class:Timespan	signature:(const Timespan& d)
Timespan::operator -=	Timespan.h	/^  Timespan& operator -= (TimeDiff microseconds);$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds)
Timespan::operator -=	Timespan.h	/^  Timespan& operator -= (const Timespan& d);$/;"	p	class:Timespan	access:public	signature:(const Timespan& d)
Timespan::operator <	Timespan.h	/^  bool operator<  (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
Timespan::operator <	Timespan.h	/^  bool operator<  (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
Timespan::operator <	Timespan.h	/^inline bool Timespan::operator< (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
Timespan::operator <	Timespan.h	/^inline bool Timespan::operator< (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
Timespan::operator <=	Timespan.h	/^  bool operator<= (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
Timespan::operator <=	Timespan.h	/^  bool operator<= (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
Timespan::operator <=	Timespan.h	/^inline bool Timespan::operator<= (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
Timespan::operator <=	Timespan.h	/^inline bool Timespan::operator<= (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
Timespan::operator =	Timespan.cc	/^Timespan&  Timespan::operator= (TimeDiff microseconds) {$/;"	f	class:Timespan	signature:(TimeDiff microseconds)
Timespan::operator =	Timespan.cc	/^Timespan& Timespan::operator= (const Timespan& timespan) {$/;"	f	class:Timespan	signature:(const Timespan& timespan)
Timespan::operator =	Timespan.h	/^  Timespan& operator= (TimeDiff microseconds);$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds)
Timespan::operator =	Timespan.h	/^  Timespan& operator= (const Timespan& timespan);$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan)
Timespan::operator ==	Timespan.h	/^  bool operator== (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
Timespan::operator ==	Timespan.h	/^  bool operator== (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
Timespan::operator ==	Timespan.h	/^inline bool Timespan::operator== (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
Timespan::operator ==	Timespan.h	/^inline bool Timespan::operator== (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
Timespan::operator >	Timespan.h	/^  bool operator>  (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
Timespan::operator >	Timespan.h	/^  bool operator>  (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
Timespan::operator >	Timespan.h	/^inline bool Timespan::operator> (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
Timespan::operator >	Timespan.h	/^inline bool Timespan::operator> (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
Timespan::operator >=	Timespan.h	/^  bool operator>= (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
Timespan::operator >=	Timespan.h	/^  bool operator>= (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
Timespan::operator >=	Timespan.h	/^inline bool Timespan::operator>= (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
Timespan::operator >=	Timespan.h	/^inline bool Timespan::operator>= (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
Timespan::seconds	Timespan.h	/^  int seconds() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::seconds	Timespan.h	/^inline int Timespan::seconds() const {$/;"	f	class:Timespan	signature:() const
Timespan::span_	Timespan.h	/^  TimeDiff span_;$/;"	m	class:Timespan	access:private
Timespan::swap	Timespan.cc	/^void Timespan::swap(Timespan& timespan) {$/;"	f	class:Timespan	signature:(Timespan& timespan)
Timespan::swap	Timespan.h	/^  void swap(Timespan& timespan);$/;"	p	class:Timespan	access:public	signature:(Timespan& timespan)
Timespan::totalHours	Timespan.h	/^  int totalHours() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::totalHours	Timespan.h	/^inline int Timespan::totalHours() const {$/;"	f	class:Timespan	signature:() const
Timespan::totalMicroseconds	Timespan.h	/^  TimeDiff totalMicroseconds() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::totalMicroseconds	Timespan.h	/^inline Timespan::TimeDiff Timespan::totalMicroseconds() const {$/;"	f	class:Timespan	signature:() const
Timespan::totalMilliseconds	Timespan.h	/^  TimeDiff totalMilliseconds() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::totalMilliseconds	Timespan.h	/^inline Timespan::TimeDiff Timespan::totalMilliseconds() const {$/;"	f	class:Timespan	signature:() const
Timespan::totalMinutes	Timespan.h	/^  int totalMinutes() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::totalMinutes	Timespan.h	/^inline int Timespan::totalMinutes() const {$/;"	f	class:Timespan	signature:() const
Timespan::totalSeconds	Timespan.h	/^  int totalSeconds() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::totalSeconds	Timespan.h	/^inline int Timespan::totalSeconds() const {$/;"	f	class:Timespan	signature:() const
Timespan::useconds	Timespan.h	/^  int useconds() const;$/;"	p	class:Timespan	access:public	signature:() const
Timespan::useconds	Timespan.h	/^inline int Timespan::useconds() const  {$/;"	f	class:Timespan	signature:() const
Timespan::~Timespan	Timespan.cc	/^Timespan::~Timespan() {$/;"	f	class:Timespan	signature:()
Timespan::~Timespan	Timespan.h	/^  ~Timespan();$/;"	p	class:Timespan	access:public	signature:()
Timestamp	Timestamp.cc	/^Timestamp::Timestamp() {$/;"	f	class:Timestamp	signature:()
Timestamp	Timestamp.cc	/^Timestamp::Timestamp(TimeVal tv) {$/;"	f	class:Timestamp	signature:(TimeVal tv)
Timestamp	Timestamp.cc	/^Timestamp::Timestamp(const Timestamp& other) {$/;"	f	class:Timestamp	signature:(const Timestamp& other)
Timestamp	Timestamp.h	/^  Timestamp();$/;"	p	class:Timestamp	access:public	signature:()
Timestamp	Timestamp.h	/^  Timestamp(TimeVal tv);$/;"	p	class:Timestamp	access:public	signature:(TimeVal tv)
Timestamp	Timestamp.h	/^  Timestamp(const Timestamp& other);$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& other)
Timestamp	Timestamp.h	/^class Timestamp {$/;"	c
Timestamp::TimeDiff	Timestamp.h	/^  typedef int64_t TimeDiff;$/;"	t	class:Timestamp	access:public
Timestamp::TimeVal	Timestamp.h	/^  typedef int64_t TimeVal;$/;"	t	class:Timestamp	access:public
Timestamp::Timestamp	Timestamp.cc	/^Timestamp::Timestamp() {$/;"	f	class:Timestamp	signature:()
Timestamp::Timestamp	Timestamp.cc	/^Timestamp::Timestamp(TimeVal tv) {$/;"	f	class:Timestamp	signature:(TimeVal tv)
Timestamp::Timestamp	Timestamp.cc	/^Timestamp::Timestamp(const Timestamp& other) {$/;"	f	class:Timestamp	signature:(const Timestamp& other)
Timestamp::Timestamp	Timestamp.h	/^  Timestamp();$/;"	p	class:Timestamp	access:public	signature:()
Timestamp::Timestamp	Timestamp.h	/^  Timestamp(TimeVal tv);$/;"	p	class:Timestamp	access:public	signature:(TimeVal tv)
Timestamp::Timestamp	Timestamp.h	/^  Timestamp(const Timestamp& other);$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& other)
Timestamp::UtcTimeVal	Timestamp.h	/^  typedef int64_t UtcTimeVal;$/;"	t	class:Timestamp	access:public
Timestamp::elapsed	Timestamp.h	/^  TimeDiff elapsed() const;$/;"	p	class:Timestamp	access:public	signature:() const
Timestamp::elapsed	Timestamp.h	/^inline Timestamp::TimeDiff Timestamp::elapsed() const {$/;"	f	class:Timestamp	signature:() const
Timestamp::epochMicroseconds	Timestamp.h	/^  TimeVal epochMicroseconds() const;$/;"	p	class:Timestamp	access:public	signature:() const
Timestamp::epochMicroseconds	Timestamp.h	/^inline Timestamp::TimeVal Timestamp::epochMicroseconds() const {$/;"	f	class:Timestamp	signature:() const
Timestamp::epochTime	Timestamp.h	/^  std::time_t epochTime() const;$/;"	p	class:Timestamp	access:public	signature:() const
Timestamp::epochTime	Timestamp.h	/^inline std::time_t Timestamp::epochTime() const {$/;"	f	class:Timestamp	signature:() const
Timestamp::fromEpochTime	Timestamp.cc	/^Timestamp Timestamp::fromEpochTime(std::time_t t) {$/;"	f	class:Timestamp	signature:(std::time_t t)
Timestamp::fromEpochTime	Timestamp.h	/^  static Timestamp fromEpochTime(std::time_t t);$/;"	p	class:Timestamp	access:public	signature:(std::time_t t)
Timestamp::fromUtcTime	Timestamp.cc	/^Timestamp Timestamp::fromUtcTime(UtcTimeVal val) {$/;"	f	class:Timestamp	signature:(UtcTimeVal val)
Timestamp::fromUtcTime	Timestamp.h	/^  static Timestamp fromUtcTime(UtcTimeVal t);$/;"	p	class:Timestamp	access:public	signature:(UtcTimeVal t)
Timestamp::isElapsed	Timestamp.h	/^  bool isElapsed(TimeDiff interval) const;$/;"	p	class:Timestamp	access:public	signature:(TimeDiff interval) const
Timestamp::isElapsed	Timestamp.h	/^inline bool Timestamp::isElapsed(Timestamp::TimeDiff interval) const {$/;"	f	class:Timestamp	signature:(Timestamp::TimeDiff interval) const
Timestamp::operator !=	Timestamp.h	/^  bool operator != (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
Timestamp::operator !=	Timestamp.h	/^inline bool Timestamp::operator!= (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
Timestamp::operator +	Timestamp.h	/^  Timestamp operator + (TimeDiff d) const;$/;"	p	class:Timestamp	access:public	signature:(TimeDiff d) const
Timestamp::operator +	Timestamp.h	/^inline Timestamp Timestamp::operator+ (TimeDiff d) const {$/;"	f	class:Timestamp	signature:(TimeDiff d) const
Timestamp::operator +=	Timestamp.h	/^  Timestamp& operator += (TimeDiff d) ;$/;"	p	class:Timestamp	access:public	signature:(TimeDiff d)
Timestamp::operator +=	Timestamp.h	/^inline Timestamp& Timestamp::operator+= (TimeDiff d) {$/;"	f	class:Timestamp	signature:(TimeDiff d)
Timestamp::operator -	Timestamp.h	/^  TimeDiff  operator - (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
Timestamp::operator -	Timestamp.h	/^  Timestamp operator - (TimeDiff d) const;$/;"	p	class:Timestamp	access:public	signature:(TimeDiff d) const
Timestamp::operator -	Timestamp.h	/^inline Timestamp Timestamp::operator- (TimeDiff d) const {$/;"	f	class:Timestamp	signature:(TimeDiff d) const
Timestamp::operator -	Timestamp.h	/^inline Timestamp::TimeDiff Timestamp::operator- (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
Timestamp::operator -=	Timestamp.h	/^  Timestamp& operator -= (TimeDiff d);$/;"	p	class:Timestamp	access:public	signature:(TimeDiff d)
Timestamp::operator -=	Timestamp.h	/^inline Timestamp& Timestamp::operator-= (TimeDiff d) {$/;"	f	class:Timestamp	signature:(TimeDiff d)
Timestamp::operator <	Timestamp.h	/^  bool operator <  (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
Timestamp::operator <	Timestamp.h	/^inline bool Timestamp::operator<  (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
Timestamp::operator <=	Timestamp.h	/^  bool operator <= (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
Timestamp::operator <=	Timestamp.h	/^inline bool Timestamp::operator<= (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
Timestamp::operator =	Timestamp.cc	/^Timestamp& Timestamp::operator=(TimeVal tv) {$/;"	f	class:Timestamp	signature:(TimeVal tv)
Timestamp::operator =	Timestamp.cc	/^Timestamp& Timestamp::operator=(const Timestamp& other) {$/;"	f	class:Timestamp	signature:(const Timestamp& other)
Timestamp::operator =	Timestamp.h	/^  Timestamp& operator= (TimeVal tv);$/;"	p	class:Timestamp	access:public	signature:(TimeVal tv)
Timestamp::operator =	Timestamp.h	/^  Timestamp& operator= (const Timestamp& other);$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& other)
Timestamp::operator ==	Timestamp.h	/^  bool operator == (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
Timestamp::operator ==	Timestamp.h	/^inline bool Timestamp::operator== (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
Timestamp::operator >	Timestamp.h	/^  bool operator >  (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
Timestamp::operator >	Timestamp.h	/^inline bool Timestamp::operator>  (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
Timestamp::operator >=	Timestamp.h	/^  bool operator >= (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
Timestamp::operator >=	Timestamp.h	/^inline bool Timestamp::operator>= (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
Timestamp::resolution	Timestamp.h	/^  static TimeVal resolution();$/;"	p	class:Timestamp	access:public	signature:()
Timestamp::resolution	Timestamp.h	/^inline Timestamp::TimeVal Timestamp::resolution() {$/;"	f	class:Timestamp	signature:()
Timestamp::swap	Timestamp.cc	/^void Timestamp::swap(Timestamp& timestamp) {$/;"	f	class:Timestamp	signature:(Timestamp& timestamp)
Timestamp::swap	Timestamp.h	/^  void swap(Timestamp& timestamp);$/;"	p	class:Timestamp	access:public	signature:(Timestamp& timestamp)
Timestamp::ts_	Timestamp.h	/^  TimeVal ts_;$/;"	m	class:Timestamp	access:private
Timestamp::update	Timestamp.cc	/^void Timestamp::update() {$/;"	f	class:Timestamp	signature:()
Timestamp::update	Timestamp.h	/^  void update();$/;"	p	class:Timestamp	access:public	signature:()
Timestamp::utcTime	Timestamp.h	/^  UtcTimeVal utcTime() const;$/;"	p	class:Timestamp	access:public	signature:() const
Timestamp::utcTime	Timestamp.h	/^inline Timestamp::UtcTimeVal Timestamp::utcTime() const {$/;"	f	class:Timestamp	signature:() const
Timestamp::~Timestamp	Timestamp.cc	/^Timestamp::~Timestamp() {$/;"	f	class:Timestamp	signature:()
Timestamp::~Timestamp	Timestamp.h	/^  ~Timestamp();$/;"	p	class:Timestamp	access:public	signature:()
UtcTimeVal	Timestamp.h	/^  typedef int64_t UtcTimeVal;$/;"	t	class:Timestamp	access:public
WritableNotification	SocketNotification.cc	/^WritableNotification::WritableNotification($/;"	f	class:WritableNotification	signature:( SocketReactor* pReactor)
WritableNotification	SocketNotification.h	/^  WritableNotification(SocketReactor* pReactor);$/;"	p	class:WritableNotification	access:public	signature:(SocketReactor* pReactor)
WritableNotification	SocketNotification.h	/^class WritableNotification : public SocketNotification {$/;"	c	inherits:SocketNotification
WritableNotification::WritableNotification	SocketNotification.cc	/^WritableNotification::WritableNotification($/;"	f	class:WritableNotification	signature:( SocketReactor* pReactor)
WritableNotification::WritableNotification	SocketNotification.h	/^  WritableNotification(SocketReactor* pReactor);$/;"	p	class:WritableNotification	access:public	signature:(SocketReactor* pReactor)
WritableNotification::~WritableNotification	SocketNotification.cc	/^WritableNotification::~WritableNotification() {$/;"	f	class:WritableNotification	signature:()
WritableNotification::~WritableNotification	SocketNotification.h	/^  ~WritableNotification();$/;"	p	class:WritableNotification	access:public	signature:()
acceptConnection	SocketImpl.cc	/^SocketImpl* SocketImpl::acceptConnection(SocketAddress& clientAddr) {$/;"	f	class:SocketImpl	signature:(SocketAddress& clientAddr)
acceptConnection	SocketImpl.h	/^  virtual SocketImpl* acceptConnection(SocketAddress& clientAddr);$/;"	p	class:SocketImpl	access:public	signature:(SocketAddress& clientAddr)
accepts	AbstractObserver.h	/^  virtual bool accepts(Notification* pNf) const = 0;$/;"	p	class:AbstractObserver	access:public	signature:(Notification* pNf) const
accepts	Observer.h	/^  bool accepts(Notification* pNf) const {$/;"	f	class:Observer	access:public	signature:(Notification* pNf) const
addObserver	NotificationCenter.cc	/^void NotificationCenter::addObserver(const AbstractObserver& observer) {$/;"	f	class:NotificationCenter	signature:(const AbstractObserver& observer)
addObserver	NotificationCenter.h	/^  void addObserver(const AbstractObserver& observer);$/;"	p	class:NotificationCenter	access:public	signature:(const AbstractObserver& observer)
addr	IPAddress.cc	/^  const void* addr() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
addr	IPAddress.cc	/^  virtual const void* addr() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
addr	IPAddress.cc	/^const void* IPAddress::addr() const {$/;"	f	class:IPAddress	signature:() const
addr	IPAddress.h	/^  const void* addr() const;$/;"	p	class:IPAddress	access:public	signature:() const
addr	SocketAddress.cc	/^  const struct sockaddr* addr() const{$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:() const
addr	SocketAddress.cc	/^  virtual const struct sockaddr* addr() const = 0;$/;"	p	class:SocketAddressImpl	file:	access:public	signature:() const
addr	SocketAddress.h	/^  const struct sockaddr* addr() const;$/;"	p	class:SocketAddress	access:public	signature:() const
addr_	IPAddress.cc	/^  struct in_addr addr_;$/;"	m	class:IPv4AddressImpl	typeref:struct:IPv4AddressImpl::in_addr	file:	access:private
addr_	SocketAddress.cc	/^  struct sockaddr_in addr_;$/;"	m	class:IPv4SocketAddressImpl	typeref:struct:IPv4SocketAddressImpl::sockaddr_in	file:	access:private
address	Socket.h	/^  SocketAddress address() const;$/;"	p	class:Socket	access:public	signature:() const
address	Socket.h	/^inline SocketAddress Socket::address() const{$/;"	f	class:Socket	signature:() const
address	SocketImpl.cc	/^SocketAddress SocketImpl::address() {$/;"	f	class:SocketImpl	signature:()
address	SocketImpl.h	/^  virtual SocketAddress address();$/;"	p	class:SocketImpl	access:public	signature:()
af	IPAddress.cc	/^  int af() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
af	IPAddress.cc	/^  virtual int af() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
af	IPAddress.cc	/^int IPAddress::af() const {$/;"	f	class:IPAddress	signature:() const
af	IPAddress.h	/^  int af() const;$/;"	p	class:IPAddress	access:public	signature:() const
af	SocketAddress.cc	/^  int af() const{$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:() const
af	SocketAddress.cc	/^  virtual int af() const = 0;$/;"	p	class:SocketAddressImpl	file:	access:public	signature:() const
af	SocketAddress.cc	/^int SocketAddress::af() const {$/;"	f	class:SocketAddress	signature:() const
af	SocketAddress.h	/^  int af() const;$/;"	p	class:SocketAddress	access:public	signature:() const
assign	AutoPtr.h	/^  AutoPtr& assign(C* ptr) {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr)
assign	AutoPtr.h	/^  AutoPtr& assign(C* ptr, bool shared) {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr, bool shared)
assign	AutoPtr.h	/^  AutoPtr& assign(const AutoPtr& ptr) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr)
assign	AutoPtr.h	/^  AutoPtr& assign(const AutoPtr<Other>& ptr) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr<Other>& ptr)
assign	SharedPtr.h	/^  SharedPtr& assign(C* ptr) {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr)
assign	SharedPtr.h	/^  SharedPtr& assign(const SharedPtr& ptr) {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr)
assign	SharedPtr.h	/^  SharedPtr& assign(const SharedPtr<Other, RC, OtherRP>& ptr) {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr<Other, RC, OtherRP>& ptr)
assign	Timespan.cc	/^Timespan& Timespan::assign(int days, int hours, int minutes, int seconds,$/;"	f	class:Timespan	signature:(int days, int hours, int minutes, int seconds, int microseconds)
assign	Timespan.cc	/^Timespan& Timespan::assign(long seconds, long microseconds) {$/;"	f	class:Timespan	signature:(long seconds, long microseconds)
assign	Timespan.h	/^  Timespan& assign(int days, int hours, int minutes, int seconds,$/;"	p	class:Timespan	access:public	signature:(int days, int hours, int minutes, int seconds, int microseconds)
assign	Timespan.h	/^  Timespan& assign(long seconds, long microseconds);$/;"	p	class:Timespan	access:public	signature:(long seconds, long microseconds)
available	Socket.h	/^  int available() const;$/;"	p	class:Socket	access:public	signature:() const
available	Socket.h	/^inline int Socket::available() const {$/;"	f	class:Socket	signature:() const
available	SocketImpl.cc	/^int SocketImpl::available() {$/;"	f	class:SocketImpl	signature:()
available	SocketImpl.h	/^  virtual int available();$/;"	p	class:SocketImpl	access:public	signature:()
bind	SocketImpl.cc	/^void SocketImpl::bind(const SocketAddress& address,$/;"	f	class:SocketImpl	signature:(const SocketAddress& address, bool reuseAddress)
bind	SocketImpl.h	/^  virtual void bind(const SocketAddress& address, bool reuseAddress = false);$/;"	p	class:SocketImpl	access:public	signature:(const SocketAddress& address, bool reuseAddress = false)
blocking_	SocketImpl.h	/^  bool blocking_;$/;"	m	class:SocketImpl	access:private
broadcast	IPAddress.cc	/^IPAddress IPAddress::broadcast() {$/;"	f	class:IPAddress	signature:()
broadcast	IPAddress.h	/^  static IPAddress broadcast();$/;"	p	class:IPAddress	access:public	signature:()
cast	AutoPtr.h	/^  AutoPtr<Other> cast()const {$/;"	f	class:AutoPtr	access:public	signature:() const
cast	SharedPtr.h	/^  SharedPtr<Other, RC, RP> cast() const {$/;"	f	class:SharedPtr	access:public	signature:() const
className	Exception.cc	/^const char* Exception::className() const throw() {$/;"	f	class:Exception	signature:() const
className	Exception.h	/^  virtual const char* className() const throw();$/;"	p	class:Exception	access:public	signature:() const
clone	AbstractObserver.h	/^  virtual AbstractObserver* clone() const = 0;$/;"	p	class:AbstractObserver	access:public	signature:() const
clone	Exception.cc	/^Exception* Exception::clone() const {$/;"	f	class:Exception	signature:() const
clone	Exception.h	/^  virtual Exception* clone() const;$/;"	p	class:Exception	access:public	signature:() const
clone	IPAddress.cc	/^  IPAddressImpl* clone() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
clone	IPAddress.cc	/^  virtual IPAddressImpl* clone() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
clone	Observer.h	/^  AbstractObserver* clone() const {$/;"	f	class:Observer	access:public	signature:() const
close	Socket.h	/^  void close();$/;"	p	class:Socket	access:public	signature:()
close	Socket.h	/^inline void Socket::close() {$/;"	f	class:Socket	signature:()
close	SocketImpl.cc	/^void SocketImpl::close() {$/;"	f	class:SocketImpl	signature:()
close	SocketImpl.h	/^  virtual void close();$/;"	p	class:SocketImpl	access:public	signature:()
cnt_	SharedPtr.h	/^  int cnt_;$/;"	m	class:ReferenceCounter	access:private
code	Exception.h	/^  int code() const;$/;"	p	class:Exception	access:public	signature:() const
code	Exception.h	/^inline int Exception::code() const {$/;"	f	class:Exception	signature:() const
code_	Exception.h	/^  int code_;$/;"	m	class:Exception	access:private
connect	SocketImpl.cc	/^void SocketImpl::connect(const SocketAddress& address) {$/;"	f	class:SocketImpl	signature:(const SocketAddress& address)
connect	SocketImpl.cc	/^void SocketImpl::connect(const SocketAddress& address,$/;"	f	class:SocketImpl	signature:(const SocketAddress& address, const Timespan& timespan)
connect	SocketImpl.h	/^  virtual void connect(const SocketAddress& address);$/;"	p	class:SocketImpl	access:public	signature:(const SocketAddress& address)
connect	SocketImpl.h	/^  virtual void connect(const SocketAddress& address,$/;"	p	class:SocketImpl	access:public	signature:(const SocketAddress& address, const Timespan& timespan)
connectNB	SocketImpl.cc	/^void SocketImpl::connectNB(const SocketAddress& address) {$/;"	f	class:SocketImpl	signature:(const SocketAddress& address)
connectNB	SocketImpl.h	/^  virtual void connectNB(const SocketAddress& address);$/;"	p	class:SocketImpl	access:public	signature:(const SocketAddress& address)
countObservers	NotificationCenter.h	/^  std::size_t countObservers() const;$/;"	p	class:NotificationCenter	access:public	signature:() const
counter_	RefCountedObject.h	/^   mutable int counter_;$/;"	m	class:RefCountedObject	access:private
days	Timespan.h	/^  int days() const;$/;"	p	class:Timespan	access:public	signature:() const
days	Timespan.h	/^inline int Timespan::days() const {$/;"	f	class:Timespan	signature:() const
decref	SharedPtr.h	/^  C* decref() const {$/;"	f	class:SharedPtr	access:private	signature:() const
defaultCenter	NotificationCenter.h	/^  static NotificationCenter& defaultCenter();$/;"	p	class:NotificationCenter	access:public	signature:()
disable	AbstractObserver.h	/^  virtual void disable() = 0;$/;"	p	class:AbstractObserver	access:public	signature:()
disable	Observer.h	/^  void disable() {$/;"	f	class:Observer	access:public	signature:()
displayText	Exception.cc	/^std::string Exception::displayText() const {$/;"	f	class:Exception	signature:() const
displayText	Exception.h	/^  std::string displayText() const;$/;"	p	class:Exception	access:public	signature:() const
duplicate	AutoPtr.h	/^  C* duplicate() {$/;"	f	class:AutoPtr	access:public	signature:()
duplicate	RefCountedObject.h	/^   void duplicate() const;$/;"	p	class:RefCountedObject	access:public	signature:() const
duplicate	RefCountedObject.h	/^inline void RefCountedObject::duplicate() const {$/;"	f	class:RefCountedObject	signature:() const
duplicate	SharedPtr.h	/^  void duplicate() {$/;"	f	class:ReferenceCounter	access:public	signature:()
elapsed	Timestamp.h	/^  TimeDiff elapsed() const;$/;"	p	class:Timestamp	access:public	signature:() const
elapsed	Timestamp.h	/^inline Timestamp::TimeDiff Timestamp::elapsed() const {$/;"	f	class:Timestamp	signature:() const
epochMicroseconds	Timestamp.h	/^  TimeVal epochMicroseconds() const;$/;"	p	class:Timestamp	access:public	signature:() const
epochMicroseconds	Timestamp.h	/^inline Timestamp::TimeVal Timestamp::epochMicroseconds() const {$/;"	f	class:Timestamp	signature:() const
epochTime	Timestamp.h	/^  std::time_t epochTime() const;$/;"	p	class:Timestamp	access:public	signature:() const
epochTime	Timestamp.h	/^inline std::time_t Timestamp::epochTime() const {$/;"	f	class:Timestamp	signature:() const
equals	AbstractObserver.h	/^  virtual bool equals(const AbstractObserver& observer) const = 0;$/;"	p	class:AbstractObserver	access:public	signature:(const AbstractObserver& observer) const
equals	Observer.h	/^  bool equals(const AbstractObserver& abstractObserver) const {$/;"	f	class:Observer	access:public	signature:(const AbstractObserver& abstractObserver) const
error	SocketImpl.cc	/^void SocketImpl::error() {$/;"	f	class:SocketImpl	signature:()
error	SocketImpl.cc	/^void SocketImpl::error(const std::string& arg) {$/;"	f	class:SocketImpl	signature:(const std::string& arg)
error	SocketImpl.cc	/^void SocketImpl::error(int code) {$/;"	f	class:SocketImpl	signature:(int code)
error	SocketImpl.cc	/^void SocketImpl::error(int code, const std::string& arg) {$/;"	f	class:SocketImpl	signature:(int code, const std::string& arg)
error	SocketImpl.h	/^  static void error();$/;"	p	class:SocketImpl	access:protected	signature:()
error	SocketImpl.h	/^  static void error(const std::string& arg);$/;"	p	class:SocketImpl	access:protected	signature:(const std::string& arg)
error	SocketImpl.h	/^  static void error(int code);$/;"	p	class:SocketImpl	access:protected	signature:(int code)
error	SocketImpl.h	/^  static void error(int code, const std::string& arg);$/;"	p	class:SocketImpl	access:protected	signature:(int code, const std::string& arg)
extenedMessage	Exception.cc	/^void Exception::extenedMessage(const std::string& arg) {$/;"	f	class:Exception	signature:(const std::string& arg)
extenedMessage	Exception.h	/^  void extenedMessage(const std::string& arg);$/;"	p	class:Exception	access:protected	signature:(const std::string& arg)
family	IPAddress.cc	/^  IPAddress::Family family() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
family	IPAddress.cc	/^  virtual IPAddress::Family family() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
family	IPAddress.cc	/^IPAddress::Family IPAddress::family() const {$/;"	f	class:IPAddress	signature:() const
family	IPAddress.h	/^  Family family() const;$/;"	p	class:IPAddress	access:public	signature:() const
family	SocketAddress.h	/^  IPAddress::Family family() const;$/;"	p	class:SocketAddress	access:public	signature:() const
fromEpochTime	Timestamp.cc	/^Timestamp Timestamp::fromEpochTime(std::time_t t) {$/;"	f	class:Timestamp	signature:(std::time_t t)
fromEpochTime	Timestamp.h	/^  static Timestamp fromEpochTime(std::time_t t);$/;"	p	class:Timestamp	access:public	signature:(std::time_t t)
fromUtcTime	Timestamp.cc	/^Timestamp Timestamp::fromUtcTime(UtcTimeVal val) {$/;"	f	class:Timestamp	signature:(UtcTimeVal val)
fromUtcTime	Timestamp.h	/^  static Timestamp fromUtcTime(UtcTimeVal t);$/;"	p	class:Timestamp	access:public	signature:(UtcTimeVal t)
get	AutoPtr.h	/^  C* get() {$/;"	f	class:AutoPtr	access:public	signature:()
get	AutoPtr.h	/^  const C* get() const {$/;"	f	class:AutoPtr	access:public	signature:() const
get	SharedPtr.h	/^  C* get() {$/;"	f	class:SharedPtr	access:public	signature:()
get	SharedPtr.h	/^  const C* get() const {$/;"	f	class:SharedPtr	access:public	signature:() const
getBlocking	Socket.h	/^  bool getBlocking()const;$/;"	p	class:Socket	access:public	signature:() const
getBlocking	Socket.h	/^inline bool Socket::getBlocking() const{$/;"	f	class:Socket	signature:() const
getBlocking	SocketImpl.h	/^  virtual bool getBlocking() const;$/;"	p	class:SocketImpl	access:public	signature:() const
getBlocking	SocketImpl.h	/^inline bool SocketImpl::getBlocking() const {$/;"	f	class:SocketImpl	signature:() const
getBroadcast	SocketImpl.cc	/^bool SocketImpl::getBroadcast() {$/;"	f	class:SocketImpl	signature:()
getBroadcast	SocketImpl.h	/^  bool getBroadcast();$/;"	p	class:SocketImpl	access:public	signature:()
getKeepAlive	Socket.h	/^  bool getKeepAlive()const;$/;"	p	class:Socket	access:public	signature:() const
getKeepAlive	Socket.h	/^inline bool Socket::getKeepAlive() const{$/;"	f	class:Socket	signature:() const
getKeepAlive	SocketImpl.cc	/^bool SocketImpl::getKeepAlive() {$/;"	f	class:SocketImpl	signature:()
getKeepAlive	SocketImpl.h	/^  bool getKeepAlive();$/;"	p	class:SocketImpl	access:public	signature:()
getLinger	Socket.h	/^  void getLinger(bool& on, int& seconds)const ;$/;"	p	class:Socket	access:public	signature:(bool& on, int& seconds) const
getLinger	Socket.h	/^inline void Socket::getLinger(bool& on, int& seconds) const{$/;"	f	class:Socket	signature:(bool& on, int& seconds) const
getLinger	SocketImpl.cc	/^void SocketImpl::getLinger(bool& on, int& seconds) {$/;"	f	class:SocketImpl	signature:(bool& on, int& seconds)
getLinger	SocketImpl.h	/^  void getLinger(bool& on, int& seconds);$/;"	p	class:SocketImpl	access:public	signature:(bool& on, int& seconds)
getNoDelay	Socket.h	/^  bool getNoDelay()const ;$/;"	p	class:Socket	access:public	signature:() const
getNoDelay	Socket.h	/^inline bool Socket::getNoDelay() const{$/;"	f	class:Socket	signature:() const
getNoDelay	SocketImpl.cc	/^bool SocketImpl::getNoDelay() {$/;"	f	class:SocketImpl	signature:()
getNoDelay	SocketImpl.h	/^  bool getNoDelay();$/;"	p	class:SocketImpl	access:public	signature:()
getOOBInline	Socket.h	/^  bool getOOBInline() const;$/;"	p	class:Socket	access:public	signature:() const
getOOBInline	Socket.h	/^inline bool Socket::getOOBInline() const{$/;"	f	class:Socket	signature:() const
getOOBInline	SocketImpl.cc	/^bool SocketImpl::getOOBInline() {$/;"	f	class:SocketImpl	signature:()
getOOBInline	SocketImpl.h	/^  bool getOOBInline();$/;"	p	class:SocketImpl	access:public	signature:()
getOption	Socket.h	/^  void getOption(int level, int opotion, IPAddress& value)const;$/;"	p	class:Socket	access:public	signature:(int level, int opotion, IPAddress& value) const
getOption	Socket.h	/^  void getOption(int level, int opotion, Timespan& value)const;$/;"	p	class:Socket	access:public	signature:(int level, int opotion, Timespan& value) const
getOption	Socket.h	/^  void getOption(int level, int opotion, int& value)const ;$/;"	p	class:Socket	access:public	signature:(int level, int opotion, int& value) const
getOption	Socket.h	/^  void getOption(int level, int opotion, unsigned char& value)const;$/;"	p	class:Socket	access:public	signature:(int level, int opotion, unsigned char& value) const
getOption	Socket.h	/^  void getOption(int level, int opotion, unsigned& value)const;$/;"	p	class:Socket	access:public	signature:(int level, int opotion, unsigned& value) const
getOption	Socket.h	/^inline void Socket::getOption(int level, int option, Timespan& value) const{$/;"	f	class:Socket	signature:(int level, int option, Timespan& value) const
getOption	Socket.h	/^inline void Socket::getOption(int level, int option, int& value) const{$/;"	f	class:Socket	signature:(int level, int option, int& value) const
getOption	Socket.h	/^inline void Socket::getOption(int level, int option, unsigned& value) const{$/;"	f	class:Socket	signature:(int level, int option, unsigned& value) const
getOption	Socket.h	/^inline void Socket::getOption(int level, int option,$/;"	f	class:Socket	signature:(int level, int option, IPAddress& value) const
getOption	Socket.h	/^inline void Socket::getOption(int level, int option,$/;"	f	class:Socket	signature:(int level, int option, unsigned char& value) const
getOption	SocketImpl.cc	/^void SocketImpl::getOption(int level, int option, IPAddress& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, IPAddress& value)
getOption	SocketImpl.cc	/^void SocketImpl::getOption(int level, int option, Timespan& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, Timespan& value)
getOption	SocketImpl.cc	/^void SocketImpl::getOption(int level, int option, int& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, int& value)
getOption	SocketImpl.cc	/^void SocketImpl::getOption(int level, int option, unsigned char& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, unsigned char& value)
getOption	SocketImpl.cc	/^void SocketImpl::getOption(int level, int option, unsigned& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, unsigned& value)
getOption	SocketImpl.h	/^  void getOption(int level, int option, IPAddress& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, IPAddress& value)
getOption	SocketImpl.h	/^  void getOption(int level, int option, Timespan& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, Timespan& value)
getOption	SocketImpl.h	/^  void getOption(int level, int option, int& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, int& value)
getOption	SocketImpl.h	/^  void getOption(int level, int option, unsigned char & value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, unsigned char & value)
getOption	SocketImpl.h	/^  void getOption(int level, int option, unsigned& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, unsigned& value)
getRawOption	SocketImpl.cc	/^void SocketImpl::getRawOption(int level, int option, void* value,$/;"	f	class:SocketImpl	signature:(int level, int option, void* value, socklen_t& length)
getRawOption	SocketImpl.h	/^  virtual void getRawOption(int level, int option, void* value,$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, void* value, socklen_t& length)
getReceiveBufferSize	Socket.h	/^  int getReceiveBufferSize()const;$/;"	p	class:Socket	access:public	signature:() const
getReceiveBufferSize	Socket.h	/^inline int Socket::getReceiveBufferSize() const {$/;"	f	class:Socket	signature:() const
getReceiveBufferSize	SocketImpl.cc	/^int SocketImpl::getReceiveBufferSize() {$/;"	f	class:SocketImpl	signature:()
getReceiveBufferSize	SocketImpl.h	/^  virtual int getReceiveBufferSize();$/;"	p	class:SocketImpl	access:public	signature:()
getReceiveTimeout	Socket.h	/^  Timespan getReceiveTimeout() const;$/;"	p	class:Socket	access:public	signature:() const
getReceiveTimeout	Socket.h	/^inline Timespan Socket::getReceiveTimeout() const {$/;"	f	class:Socket	signature:() const
getReceiveTimeout	SocketImpl.cc	/^Timespan SocketImpl::getReceiveTimeout() {$/;"	f	class:SocketImpl	signature:()
getReceiveTimeout	SocketImpl.h	/^  virtual Timespan getReceiveTimeout();$/;"	p	class:SocketImpl	access:public	signature:()
getReuseAddress	Socket.h	/^  bool getReuseAddress()const ;$/;"	p	class:Socket	access:public	signature:() const
getReuseAddress	Socket.h	/^inline bool Socket::getReuseAddress() const {$/;"	f	class:Socket	signature:() const
getReuseAddress	SocketImpl.cc	/^bool SocketImpl::getReuseAddress() {$/;"	f	class:SocketImpl	signature:()
getReuseAddress	SocketImpl.h	/^  bool getReuseAddress();$/;"	p	class:SocketImpl	access:public	signature:()
getReusePort	Socket.h	/^  bool getReusePort()const ;$/;"	p	class:Socket	access:public	signature:() const
getReusePort	Socket.h	/^inline bool Socket::getReusePort() const{$/;"	f	class:Socket	signature:() const
getReusePort	SocketImpl.cc	/^bool SocketImpl::getReusePort() {$/;"	f	class:SocketImpl	signature:()
getReusePort	SocketImpl.h	/^  bool getReusePort();$/;"	p	class:SocketImpl	access:public	signature:()
getSendBufferSize	Socket.h	/^  int getSendBufferSize() const;$/;"	p	class:Socket	access:public	signature:() const
getSendBufferSize	Socket.h	/^inline int Socket::getSendBufferSize() const{$/;"	f	class:Socket	signature:() const
getSendBufferSize	SocketImpl.cc	/^int SocketImpl::getSendBufferSize() {$/;"	f	class:SocketImpl	signature:()
getSendBufferSize	SocketImpl.h	/^  virtual int getSendBufferSize();$/;"	p	class:SocketImpl	access:public	signature:()
getSendTimeout	Socket.h	/^  Timespan getSendTimeout() const;$/;"	p	class:Socket	access:public	signature:() const
getSendTimeout	Socket.h	/^inline Timespan Socket::getSendTimeout() const{$/;"	f	class:Socket	signature:() const
getSendTimeout	SocketImpl.cc	/^Timespan SocketImpl::getSendTimeout() {$/;"	f	class:SocketImpl	signature:()
getSendTimeout	SocketImpl.h	/^  virtual Timespan getSendTimeout();$/;"	p	class:SocketImpl	access:public	signature:()
hasObservers	NotificationCenter.h	/^  bool hasObservers() const;$/;"	p	class:NotificationCenter	access:public	signature:() const
host	SocketAddress.cc	/^  IPAddress host() const {$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:() const
host	SocketAddress.cc	/^  virtual IPAddress host() const = 0;$/;"	p	class:SocketAddressImpl	file:	access:public	signature:() const
host	SocketAddress.cc	/^IPAddress SocketAddress::host() const {$/;"	f	class:SocketAddress	signature:() const
host	SocketAddress.h	/^  IPAddress host() const;$/;"	p	class:SocketAddress	access:public	signature:() const
hours	Timespan.h	/^  int hours() const;$/;"	p	class:Timespan	access:public	signature:() const
hours	Timespan.h	/^inline int Timespan::hours() const {$/;"	f	class:Timespan	signature:() const
impl	Socket.h	/^  SocketImpl* impl() const;$/;"	p	class:Socket	access:public	signature:() const
impl	Socket.h	/^inline SocketImpl* Socket::impl() const{$/;"	f	class:Socket	signature:() const
init	IPAddress.cc	/^void IPAddress::init(IPAddressImpl* pImpl) {$/;"	f	class:IPAddress	signature:(IPAddressImpl* pImpl)
init	IPAddress.h	/^  void init(IPAddressImpl* pImpl);$/;"	p	class:IPAddress	access:protected	signature:(IPAddressImpl* pImpl)
init	SocketAddress.cc	/^void SocketAddress::init(const IPAddress& host, uint16_t port) {$/;"	f	class:SocketAddress	signature:(const IPAddress& host, uint16_t port)
init	SocketAddress.cc	/^void SocketAddress::init(const std::string& host, uint16_t port) {$/;"	f	class:SocketAddress	signature:(const std::string& host, uint16_t port)
init	SocketAddress.h	/^  void init(const IPAddress& host, uint16_t port);$/;"	p	class:SocketAddress	access:protected	signature:(const IPAddress& host, uint16_t port)
init	SocketAddress.h	/^  void init(const std::string& host, uint16_t port);$/;"	p	class:SocketAddress	access:protected	signature:(const std::string& host, uint16_t port)
init	SocketImpl.cc	/^void SocketImpl::init(int af) {$/;"	f	class:SocketImpl	signature:(int af)
init	SocketImpl.h	/^  virtual void init(int af);$/;"	p	class:SocketImpl	access:protected	signature:(int af)
initSocket	SocketImpl.cc	/^void SocketImpl::initSocket(int af, int type, int proto) {$/;"	f	class:SocketImpl	signature:(int af, int type, int proto)
initSocket	SocketImpl.h	/^  virtual void initSocket(int af, int type, int proto = 0);$/;"	p	class:SocketImpl	access:protected	signature:(int af, int type, int proto = 0)
initialized	SocketImpl.h	/^  bool initialized() const;$/;"	p	class:SocketImpl	access:public	signature:() const
initialized	SocketImpl.h	/^inline bool SocketImpl::initialized() const{$/;"	f	class:SocketImpl	signature:() const
ioctl	SocketImpl.cc	/^void SocketImpl::ioctl(int request, int& arg) {$/;"	f	class:SocketImpl	signature:(int request, int& arg)
ioctl	SocketImpl.cc	/^void SocketImpl::ioctl(int request, void* arg) {$/;"	f	class:SocketImpl	signature:(int request, void* arg)
ioctl	SocketImpl.h	/^  void ioctl(int request, int& arg);$/;"	p	class:SocketImpl	access:public	signature:(int request, int& arg)
ioctl	SocketImpl.h	/^  void ioctl(int request, void* arg);$/;"	p	class:SocketImpl	access:public	signature:(int request, void* arg)
isBroadCast	IPAddress.cc	/^  bool isBroadCast() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
isBroadCast	IPAddress.cc	/^  virtual bool isBroadCast() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
isBroadCast	IPAddress.cc	/^bool IPAddress::isBroadCast() const {$/;"	f	class:IPAddress	signature:() const
isBroadCast	IPAddress.h	/^  bool isBroadCast() const;$/;"	p	class:IPAddress	access:public	signature:() const
isElapsed	Timestamp.h	/^  bool isElapsed(TimeDiff interval) const;$/;"	p	class:Timestamp	access:public	signature:(TimeDiff interval) const
isElapsed	Timestamp.h	/^inline bool Timestamp::isElapsed(Timestamp::TimeDiff interval) const {$/;"	f	class:Timestamp	signature:(Timestamp::TimeDiff interval) const
isLoopback	IPAddress.cc	/^  bool isLoopback() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
isLoopback	IPAddress.cc	/^  virtual bool isLoopback() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
isLoopback	IPAddress.cc	/^bool IPAddress::isLoopback() const {$/;"	f	class:IPAddress	signature:() const
isLoopback	IPAddress.h	/^  bool isLoopback() const;$/;"	p	class:IPAddress	access:public	signature:() const
isMulticast	IPAddress.cc	/^  bool isMulticast() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
isMulticast	IPAddress.cc	/^  virtual bool isMulticast() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
isMulticast	IPAddress.cc	/^bool IPAddress::isMulticast() const {$/;"	f	class:IPAddress	signature:() const
isMulticast	IPAddress.h	/^  bool isMulticast() const;$/;"	p	class:IPAddress	access:public	signature:() const
isNull	AutoPtr.h	/^  bool isNull() const {$/;"	f	class:AutoPtr	access:public	signature:() const
isNull	SharedPtr.h	/^  bool isNull() const {$/;"	f	class:SharedPtr	access:public	signature:() const
isUnicast	IPAddress.cc	/^bool IPAddress::isUnicast() const {$/;"	f	class:IPAddress	signature:() const
isUnicast	IPAddress.h	/^  bool isUnicast() const;$/;"	p	class:IPAddress	access:public	signature:() const
isWildCard	IPAddress.cc	/^  bool isWildCard() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
isWildCard	IPAddress.cc	/^  virtual bool isWildCard() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
isWildCard	IPAddress.cc	/^bool IPAddress::isWildCard()const {$/;"	f	class:IPAddress	signature:() const
isWildCard	IPAddress.h	/^  bool isWildCard() const;$/;"	p	class:IPAddress	access:public	signature:() const
lastError	SocketImpl.h	/^  static int lastError();$/;"	p	class:SocketImpl	access:protected	signature:()
lastError	SocketImpl.h	/^inline int SocketImpl::lastError() {$/;"	f	class:SocketImpl	signature:()
length	IPAddress.cc	/^  socklen_t length() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
length	IPAddress.cc	/^  virtual socklen_t length() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
length	IPAddress.cc	/^socklen_t IPAddress::length() const {$/;"	f	class:IPAddress	signature:() const
length	IPAddress.h	/^  socklen_t length() const;$/;"	p	class:IPAddress	access:public	signature:() const
length	SocketAddress.cc	/^  socklen_t length() const {$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:() const
length	SocketAddress.cc	/^  virtual socklen_t length() const = 0;$/;"	p	class:SocketAddressImpl	file:	access:public	signature:() const
length	SocketAddress.cc	/^socklen_t SocketAddress::length() const {$/;"	f	class:SocketAddress	signature:() const
length	SocketAddress.h	/^  socklen_t length() const;$/;"	p	class:SocketAddress	access:public	signature:() const
listen	SocketImpl.cc	/^void SocketImpl::listen(int backlog) {$/;"	f	class:SocketImpl	signature:(int backlog)
listen	SocketImpl.h	/^  virtual void listen(int backlog = 64);$/;"	p	class:SocketImpl	access:public	signature:(int backlog = 64)
message	Exception.h	/^  const std::string& message() const;$/;"	p	class:Exception	access:public	signature:() const
message	Exception.h	/^  void message(const std::string& msg);$/;"	p	class:Exception	access:protected	signature:(const std::string& msg)
message	Exception.h	/^inline const std::string& Exception::message() const {$/;"	f	class:Exception	signature:() const
message	Exception.h	/^inline void Exception::message(const std::string& msg) {$/;"	f	class:Exception	signature:(const std::string& msg)
method_	Observer.h	/^  Callback method_;$/;"	m	class:Observer	access:private
microseconds	Timespan.h	/^  int microseconds() const;$/;"	p	class:Timespan	access:public	signature:() const
microseconds	Timespan.h	/^inline int Timespan::microseconds() const{$/;"	f	class:Timespan	signature:() const
milliseconds	Timespan.h	/^  int milliseconds() const;$/;"	p	class:Timespan	access:public	signature:() const
milliseconds	Timespan.h	/^inline int Timespan::milliseconds() const {$/;"	f	class:Timespan	signature:() const
minutes	Timespan.h	/^  int minutes() const;$/;"	p	class:Timespan	access:public	signature:() const
minutes	Timespan.h	/^inline int Timespan::minutes() const {$/;"	f	class:Timespan	signature:() const
msg_	Exception.h	/^  std::string msg_;$/;"	m	class:Exception	access:private
name	Exception.cc	/^const char* Exception::name() const throw() {$/;"	f	class:Exception	signature:() const
name	Exception.h	/^  virtual const char* name() const throw();$/;"	p	class:Exception	access:public	signature:() const
name	Notification.cc	/^std::string Notification::name() const {$/;"	f	class:Notification	signature:() const
name	Notification.h	/^  virtual std::string name() const;$/;"	p	class:Notification	access:public	signature:() const
nested	Exception.h	/^  const Exception* nested() const ;$/;"	p	class:Exception	access:public	signature:() const
nested	Exception.h	/^inline const Exception* Exception::nested() const {$/;"	f	class:Exception	signature:() const
notify	AbstractObserver.h	/^  virtual void notify(Notification* pNf) const = 0;$/;"	p	class:AbstractObserver	access:public	signature:(Notification* pNf) const
notify	Observer.h	/^  void notify(Notification* pNf) const {$/;"	f	class:Observer	access:public	signature:(Notification* pNf) const
observers_	NotificationCenter.h	/^  ObserverList observers_;$/;"	m	class:NotificationCenter	access:private
operator !	AutoPtr.h	/^  bool operator! () const {$/;"	f	class:AutoPtr	access:public	signature:() const
operator !	SharedPtr.h	/^  bool operator ! () const {$/;"	f	class:SharedPtr	access:public	signature:() const
operator !=	AutoPtr.h	/^  bool operator != (C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
operator !=	AutoPtr.h	/^  bool operator != (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
operator !=	AutoPtr.h	/^  bool operator != (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
operator !=	IPAddress.cc	/^bool IPAddress::operator!= (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
operator !=	IPAddress.h	/^  bool operator != (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
operator !=	SharedPtr.h	/^  bool operator != (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
operator !=	SharedPtr.h	/^  bool operator != (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
operator !=	SharedPtr.h	/^  bool operator != (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
operator !=	Socket.h	/^  bool operator != (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
operator !=	Socket.h	/^inline bool Socket::operator!= (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
operator !=	SocketAddress.h	/^  bool operator !=(const SocketAddress& addr) const;$/;"	p	class:SocketAddress	access:public	signature:(const SocketAddress& addr) const
operator !=	SocketAddress.h	/^inline bool SocketAddress::operator!=(const SocketAddress& addr) const {$/;"	f	class:SocketAddress	signature:(const SocketAddress& addr) const
operator !=	Timespan.h	/^  bool operator!= (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
operator !=	Timespan.h	/^  bool operator!= (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
operator !=	Timespan.h	/^inline bool Timespan::operator!= (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
operator !=	Timespan.h	/^inline bool Timespan::operator!= (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
operator !=	Timestamp.h	/^  bool operator != (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
operator !=	Timestamp.h	/^inline bool Timestamp::operator!= (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
operator ()	SocketAddress.cc	/^  bool operator() (const IPAddress& a1, const IPAddress& a2) {$/;"	f	struct:AFLT	access:public	signature:(const IPAddress& a1, const IPAddress& a2)
operator *	AutoPtr.h	/^  C& operator* () {$/;"	f	class:AutoPtr	access:public	signature:()
operator *	AutoPtr.h	/^  const C& operator*() const {$/;"	f	class:AutoPtr	access:public	signature:() const
operator *	SharedPtr.h	/^  C& operator * () {$/;"	f	class:SharedPtr	access:public	signature:()
operator *	SharedPtr.h	/^  const C& operator * () const {$/;"	f	class:SharedPtr	access:public	signature:() const
operator +	Timespan.cc	/^Timespan Timespan::operator + (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
operator +	Timespan.cc	/^Timespan Timespan::operator + (const Timespan& d) const {$/;"	f	class:Timespan	signature:(const Timespan& d) const
operator +	Timespan.h	/^  Timespan operator + (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
operator +	Timespan.h	/^  Timespan operator + (const Timespan& d) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& d) const
operator +	Timestamp.h	/^  Timestamp operator + (TimeDiff d) const;$/;"	p	class:Timestamp	access:public	signature:(TimeDiff d) const
operator +	Timestamp.h	/^inline Timestamp Timestamp::operator+ (TimeDiff d) const {$/;"	f	class:Timestamp	signature:(TimeDiff d) const
operator +=	Timespan.cc	/^Timespan& Timespan::operator += (TimeDiff microseconds) {$/;"	f	class:Timespan	signature:(TimeDiff microseconds)
operator +=	Timespan.cc	/^Timespan& Timespan::operator += (const Timespan& d) {$/;"	f	class:Timespan	signature:(const Timespan& d)
operator +=	Timespan.h	/^  Timespan& operator += (TimeDiff microseconds);$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds)
operator +=	Timespan.h	/^  Timespan& operator += (const Timespan& d);$/;"	p	class:Timespan	access:public	signature:(const Timespan& d)
operator +=	Timestamp.h	/^  Timestamp& operator += (TimeDiff d) ;$/;"	p	class:Timestamp	access:public	signature:(TimeDiff d)
operator +=	Timestamp.h	/^inline Timestamp& Timestamp::operator+= (TimeDiff d) {$/;"	f	class:Timestamp	signature:(TimeDiff d)
operator -	Timespan.cc	/^Timespan Timespan::operator - (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
operator -	Timespan.cc	/^Timespan Timespan::operator - (const Timespan& d) const {$/;"	f	class:Timespan	signature:(const Timespan& d) const
operator -	Timespan.h	/^  Timespan operator - (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
operator -	Timespan.h	/^  Timespan operator - (const Timespan& d) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& d) const
operator -	Timestamp.h	/^  TimeDiff  operator - (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
operator -	Timestamp.h	/^  Timestamp operator - (TimeDiff d) const;$/;"	p	class:Timestamp	access:public	signature:(TimeDiff d) const
operator -	Timestamp.h	/^inline Timestamp Timestamp::operator- (TimeDiff d) const {$/;"	f	class:Timestamp	signature:(TimeDiff d) const
operator -	Timestamp.h	/^inline Timestamp::TimeDiff Timestamp::operator- (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
operator -=	Timespan.cc	/^Timespan& Timespan::operator -= (TimeDiff microseconds) {$/;"	f	class:Timespan	signature:(TimeDiff microseconds)
operator -=	Timespan.cc	/^Timespan& Timespan::operator -= (const Timespan& d) {$/;"	f	class:Timespan	signature:(const Timespan& d)
operator -=	Timespan.h	/^  Timespan& operator -= (TimeDiff microseconds);$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds)
operator -=	Timespan.h	/^  Timespan& operator -= (const Timespan& d);$/;"	p	class:Timespan	access:public	signature:(const Timespan& d)
operator -=	Timestamp.h	/^  Timestamp& operator -= (TimeDiff d);$/;"	p	class:Timestamp	access:public	signature:(TimeDiff d)
operator -=	Timestamp.h	/^inline Timestamp& Timestamp::operator-= (TimeDiff d) {$/;"	f	class:Timestamp	signature:(TimeDiff d)
operator ->	AutoPtr.h	/^  C* operator-> () {$/;"	f	class:AutoPtr	access:public	signature:()
operator ->	AutoPtr.h	/^  const C* operator->() const{$/;"	f	class:AutoPtr	access:public	signature:() const
operator ->	SharedPtr.h	/^  C* operator -> () {$/;"	f	class:SharedPtr	access:public	signature:()
operator ->	SharedPtr.h	/^  const C* operator -> () const{$/;"	f	class:SharedPtr	access:public	signature:() const
operator <	AutoPtr.h	/^  bool operator < (C* ptr)const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
operator <	AutoPtr.h	/^  bool operator< (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
operator <	AutoPtr.h	/^  bool operator< (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
operator <	IPAddress.cc	/^bool IPAddress::operator< (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
operator <	IPAddress.h	/^  bool operator <  (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
operator <	SharedPtr.h	/^  bool operator < (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
operator <	SharedPtr.h	/^  bool operator < (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
operator <	SharedPtr.h	/^  bool operator < (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
operator <	Socket.h	/^  bool operator <  (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
operator <	Socket.h	/^inline bool Socket::operator<  (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
operator <	Timespan.h	/^  bool operator<  (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
operator <	Timespan.h	/^  bool operator<  (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
operator <	Timespan.h	/^inline bool Timespan::operator< (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
operator <	Timespan.h	/^inline bool Timespan::operator< (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
operator <	Timestamp.h	/^  bool operator <  (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
operator <	Timestamp.h	/^inline bool Timestamp::operator<  (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
operator <=	AutoPtr.h	/^  bool operator <= (C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
operator <=	AutoPtr.h	/^  bool operator <= (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
operator <=	AutoPtr.h	/^  bool operator <= (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
operator <=	IPAddress.cc	/^bool IPAddress::operator<= (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
operator <=	IPAddress.h	/^  bool operator <= (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
operator <=	SharedPtr.h	/^  bool operator <= (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
operator <=	SharedPtr.h	/^  bool operator <= (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
operator <=	SharedPtr.h	/^ bool operator <= (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
operator <=	Socket.h	/^  bool operator <= (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
operator <=	Socket.h	/^inline bool Socket::operator<= (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
operator <=	Timespan.h	/^  bool operator<= (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
operator <=	Timespan.h	/^  bool operator<= (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
operator <=	Timespan.h	/^inline bool Timespan::operator<= (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
operator <=	Timespan.h	/^inline bool Timespan::operator<= (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
operator <=	Timestamp.h	/^  bool operator <= (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
operator <=	Timestamp.h	/^inline bool Timestamp::operator<= (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
operator =	AbstractObserver.cc	/^AbstractObserver& AbstractObserver::operator= ($/;"	f	class:AbstractObserver	signature:( const AbstractObserver& observer)
operator =	AbstractObserver.h	/^  AbstractObserver& operator= (const AbstractObserver& observer);$/;"	p	class:AbstractObserver	access:public	signature:(const AbstractObserver& observer)
operator =	AutoPtr.h	/^  AutoPtr& operator= (C* ptr) {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr)
operator =	AutoPtr.h	/^  AutoPtr& operator= (const AutoPtr& ptr) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr)
operator =	AutoPtr.h	/^  AutoPtr& operator= (const AutoPtr<Other>& ptr) {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr<Other>& ptr)
operator =	Exception.cc	/^Exception& Exception::operator= (const Exception& exc) {$/;"	f	class:Exception	signature:(const Exception& exc)
operator =	Exception.h	/^  Exception& operator= (const Exception& exc);$/;"	p	class:Exception	access:public	signature:(const Exception& exc)
operator =	IPAddress.cc	/^  IPAddressImpl& operator= (const IPAddressImpl&);$/;"	p	class:IPAddressImpl	file:	access:private	signature:(const IPAddressImpl&)
operator =	IPAddress.cc	/^IPAddress& IPAddress::operator= (const IPAddress& addr) {$/;"	f	class:IPAddress	signature:(const IPAddress& addr)
operator =	IPAddress.h	/^  IPAddress& operator= (const IPAddress& addr);$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr)
operator =	Observer.h	/^  Observer& operator= (const Observer& observer) {$/;"	f	class:Observer	access:public	signature:(const Observer& observer)
operator =	RefCountedObject.h	/^   RefCountedObject& operator=(const RefCountedObject&);$/;"	p	class:RefCountedObject	access:private	signature:(const RefCountedObject&)
operator =	SharedPtr.h	/^  SharedPtr& operator = (C* ptr) {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr)
operator =	SharedPtr.h	/^  SharedPtr& operator = (const SharedPtr& ptr) {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr)
operator =	SharedPtr.h	/^  SharedPtr& operator = (const SharedPtr<Other, RC, OtherRP>& ptr) {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr<Other, RC, OtherRP>& ptr)
operator =	Socket.cc	/^Socket& Socket::operator=(const Socket& socket) {$/;"	f	class:Socket	signature:(const Socket& socket)
operator =	Socket.h	/^  Socket& operator= (const Socket& socket);$/;"	p	class:Socket	access:public	signature:(const Socket& socket)
operator =	SocketAddress.cc	/^  SocketAddressImpl& operator= (const SocketAddressImpl&);$/;"	p	class:SocketAddressImpl	file:	access:private	signature:(const SocketAddressImpl&)
operator =	SocketAddress.cc	/^SocketAddress& SocketAddress::operator = (const SocketAddress& addr) {$/;"	f	class:SocketAddress	signature:(const SocketAddress& addr)
operator =	SocketAddress.h	/^  SocketAddress& operator= (const SocketAddress& addr);$/;"	p	class:SocketAddress	access:public	signature:(const SocketAddress& addr)
operator =	SocketImpl.h	/^  SocketImpl& operator = (const SocketImpl&);$/;"	p	class:SocketImpl	access:private	signature:(const SocketImpl&)
operator =	Timespan.cc	/^Timespan&  Timespan::operator= (TimeDiff microseconds) {$/;"	f	class:Timespan	signature:(TimeDiff microseconds)
operator =	Timespan.cc	/^Timespan& Timespan::operator= (const Timespan& timespan) {$/;"	f	class:Timespan	signature:(const Timespan& timespan)
operator =	Timespan.h	/^  Timespan& operator= (TimeDiff microseconds);$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds)
operator =	Timespan.h	/^  Timespan& operator= (const Timespan& timespan);$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan)
operator =	Timestamp.cc	/^Timestamp& Timestamp::operator=(TimeVal tv) {$/;"	f	class:Timestamp	signature:(TimeVal tv)
operator =	Timestamp.cc	/^Timestamp& Timestamp::operator=(const Timestamp& other) {$/;"	f	class:Timestamp	signature:(const Timestamp& other)
operator =	Timestamp.h	/^  Timestamp& operator= (TimeVal tv);$/;"	p	class:Timestamp	access:public	signature:(TimeVal tv)
operator =	Timestamp.h	/^  Timestamp& operator= (const Timestamp& other);$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& other)
operator ==	AutoPtr.h	/^  bool operator == (C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
operator ==	AutoPtr.h	/^  bool operator == (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
operator ==	AutoPtr.h	/^  bool operator== (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
operator ==	IPAddress.cc	/^bool IPAddress::operator== (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
operator ==	IPAddress.h	/^  bool operator == (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
operator ==	SharedPtr.h	/^  bool operator == (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
operator ==	SharedPtr.h	/^  bool operator == (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
operator ==	SharedPtr.h	/^  bool operator == (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
operator ==	Socket.h	/^  bool operator == (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
operator ==	Socket.h	/^inline bool Socket::operator== (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
operator ==	SocketAddress.h	/^  bool operator ==(const SocketAddress& addr) const;$/;"	p	class:SocketAddress	access:public	signature:(const SocketAddress& addr) const
operator ==	SocketAddress.h	/^inline bool SocketAddress::operator== (const SocketAddress& addr) const {$/;"	f	class:SocketAddress	signature:(const SocketAddress& addr) const
operator ==	Timespan.h	/^  bool operator== (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
operator ==	Timespan.h	/^  bool operator== (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
operator ==	Timespan.h	/^inline bool Timespan::operator== (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
operator ==	Timespan.h	/^inline bool Timespan::operator== (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
operator ==	Timestamp.h	/^  bool operator == (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
operator ==	Timestamp.h	/^inline bool Timestamp::operator== (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
operator >	AutoPtr.h	/^  bool operator > (C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
operator >	AutoPtr.h	/^  bool operator > (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
operator >	AutoPtr.h	/^  bool operator > (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
operator >	IPAddress.cc	/^bool IPAddress::operator> (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
operator >	IPAddress.h	/^  bool operator >  (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
operator >	SharedPtr.h	/^  bool operator > (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
operator >	SharedPtr.h	/^  bool operator > (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
operator >	SharedPtr.h	/^  bool operator > (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
operator >	Socket.h	/^  bool operator >  (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
operator >	Socket.h	/^inline bool Socket::operator>  (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
operator >	Timespan.h	/^  bool operator>  (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
operator >	Timespan.h	/^  bool operator>  (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
operator >	Timespan.h	/^inline bool Timespan::operator> (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
operator >	Timespan.h	/^inline bool Timespan::operator> (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
operator >	Timestamp.h	/^  bool operator >  (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
operator >	Timestamp.h	/^inline bool Timestamp::operator>  (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
operator >=	AutoPtr.h	/^  bool operator >= (C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(C* ptr) const
operator >=	AutoPtr.h	/^  bool operator >= (const AutoPtr& ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const AutoPtr& ptr) const
operator >=	AutoPtr.h	/^  bool operator >= (const C* ptr) const {$/;"	f	class:AutoPtr	access:public	signature:(const C* ptr) const
operator >=	IPAddress.cc	/^bool IPAddress::operator>= (const IPAddress& a) const {$/;"	f	class:IPAddress	signature:(const IPAddress& a) const
operator >=	IPAddress.h	/^  bool operator >= (const IPAddress& addr) const;$/;"	p	class:IPAddress	access:public	signature:(const IPAddress& addr) const
operator >=	SharedPtr.h	/^  bool operator >= (C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(C* ptr) const
operator >=	SharedPtr.h	/^  bool operator >= (const C* ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const C* ptr) const
operator >=	SharedPtr.h	/^  bool operator >= (const SharedPtr& ptr) const {$/;"	f	class:SharedPtr	access:public	signature:(const SharedPtr& ptr) const
operator >=	Socket.h	/^  bool operator >= (const Socket& socket) const;$/;"	p	class:Socket	access:public	signature:(const Socket& socket) const
operator >=	Socket.h	/^inline bool Socket::operator>= (const Socket& socket) const {$/;"	f	class:Socket	signature:(const Socket& socket) const
operator >=	Timespan.h	/^  bool operator>= (TimeDiff microseconds) const;$/;"	p	class:Timespan	access:public	signature:(TimeDiff microseconds) const
operator >=	Timespan.h	/^  bool operator>= (const Timespan& timespan) const;$/;"	p	class:Timespan	access:public	signature:(const Timespan& timespan) const
operator >=	Timespan.h	/^inline bool Timespan::operator>= (TimeDiff microseconds) const {$/;"	f	class:Timespan	signature:(TimeDiff microseconds) const
operator >=	Timespan.h	/^inline bool Timespan::operator>= (const Timespan& timespan) const {$/;"	f	class:Timespan	signature:(const Timespan& timespan) const
operator >=	Timestamp.h	/^  bool operator >= (const Timestamp& ts) const;$/;"	p	class:Timestamp	access:public	signature:(const Timestamp& ts) const
operator >=	Timestamp.h	/^inline bool Timestamp::operator>= (const Timestamp& ts) const {$/;"	f	class:Timestamp	signature:(const Timestamp& ts) const
operator C*	AutoPtr.h	/^  operator C*() {$/;"	f	class:AutoPtr	access:public	signature:()
operator C*	SharedPtr.h	/^  operator C* () {$/;"	f	class:SharedPtr	access:public	signature:()
operator const C*	AutoPtr.h	/^  operator const C*() const {$/;"	f	class:AutoPtr	access:public	signature:() const
operator const C*	SharedPtr.h	/^  operator const C* () {$/;"	f	class:SharedPtr	access:public	signature:()
pCounter_	SharedPtr.h	/^  RC* pCounter_;$/;"	m	class:SharedPtr	access:private
pImpl_	IPAddress.h	/^  IPAddressImpl* pImpl_;$/;"	m	class:IPAddress	access:private
pImpl_	Socket.h	/^  SocketImpl* pImpl_;$/;"	m	class:Socket	access:private
pImpl_	SocketAddress.h	/^  SocketAddressImpl* pImpl_;$/;"	m	class:SocketAddress	access:private
pNested_	Exception.h	/^  Exception* pNested_;$/;"	m	class:Exception	access:private
pObject_	Observer.h	/^  C* pObject_;$/;"	m	class:Observer	access:private
pReactor_	SocketNotification.h	/^  SocketReactor * pReactor_;$/;"	m	class:SocketNotification	access:private
parse	IPAddress.cc	/^  static IPv4AddressImpl* parse(const std::string& addr) {$/;"	f	class:IPv4AddressImpl	access:public	signature:(const std::string& addr)
parse	IPAddress.cc	/^IPAddress IPAddress::parse(const std::string& addr) {$/;"	f	class:IPAddress	signature:(const std::string& addr)
parse	IPAddress.h	/^  static IPAddress parse(const std::string& addr);$/;"	p	class:IPAddress	access:public	signature:(const std::string& addr)
peerAddress	Socket.h	/^  SocketAddress peerAddress() const;$/;"	p	class:Socket	access:public	signature:() const
peerAddress	Socket.h	/^inline SocketAddress Socket::peerAddress() const{$/;"	f	class:Socket	signature:() const
peerAddress	SocketImpl.cc	/^SocketAddress SocketImpl::peerAddress() {$/;"	f	class:SocketImpl	signature:()
peerAddress	SocketImpl.h	/^  virtual SocketAddress peerAddress();$/;"	p	class:SocketImpl	access:public	signature:()
poll	Socket.h	/^  bool poll(const Timespan& timeout, int mode) const;$/;"	p	class:Socket	access:public	signature:(const Timespan& timeout, int mode) const
poll	Socket.h	/^inline bool Socket::poll(const Timespan& timeout, int mode) const{$/;"	f	class:Socket	signature:(const Timespan& timeout, int mode) const
poll	SocketImpl.cc	/^bool SocketImpl::poll(const Timespan& timeout, int mode) {$/;"	f	class:SocketImpl	signature:(const Timespan& timeout, int mode)
poll	SocketImpl.h	/^  virtual bool poll(const Timespan& timeout, int mode);$/;"	p	class:SocketImpl	access:public	signature:(const Timespan& timeout, int mode)
port	SocketAddress.cc	/^  uint16_t port() const{$/;"	f	class:IPv4SocketAddressImpl	access:public	signature:() const
port	SocketAddress.cc	/^  virtual uint16_t port() const = 0;$/;"	p	class:SocketAddressImpl	file:	access:public	signature:() const
port	SocketAddress.cc	/^uint16_t SocketAddress::port() const {$/;"	f	class:SocketAddress	signature:() const
port	SocketAddress.h	/^  uint16_t port() const;$/;"	p	class:SocketAddress	access:public	signature:() const
postNotification	NotificationCenter.cc	/^void NotificationCenter::postNotification(Notification::Ptr pNotification) {$/;"	f	class:NotificationCenter	signature:(Notification::Ptr pNotification)
postNotification	NotificationCenter.h	/^  void postNotification(Notification::Ptr pNotification);$/;"	p	class:NotificationCenter	access:public	signature:(Notification::Ptr pNotification)
ptr_	AutoPtr.h	/^  C* ptr_;$/;"	m	class:AutoPtr	access:private
ptr_	SharedPtr.h	/^  C*  ptr_;$/;"	m	class:SharedPtr	access:private
receiveBytes	SocketImpl.cc	/^int SocketImpl::receiveBytes(void* buffer, int length, int flags) {$/;"	f	class:SocketImpl	signature:(void* buffer, int length, int flags)
receiveBytes	SocketImpl.h	/^  virtual int receiveBytes(void* buffer, int length, int flags = 0);$/;"	p	class:SocketImpl	access:public	signature:(void* buffer, int length, int flags = 0)
receiveFrom	SocketImpl.cc	/^int SocketImpl::receiveFrom(void* buffer, int length, SocketAddress& address,$/;"	f	class:SocketImpl	signature:(void* buffer, int length, SocketAddress& address, int flags)
receiveFrom	SocketImpl.h	/^  virtual int receiveFrom(void* buffer, int length, SocketAddress& address,$/;"	p	class:SocketImpl	access:public	signature:(void* buffer, int length, SocketAddress& address, int flags = 0)
recvTimeout_	SocketImpl.h	/^  Timespan recvTimeout_;$/;"	m	class:SocketImpl	access:private
referenceCount	RefCountedObject.h	/^   int referenceCount() const;$/;"	p	class:RefCountedObject	access:public	signature:() const
referenceCount	RefCountedObject.h	/^inline int RefCountedObject::referenceCount() const {$/;"	f	class:RefCountedObject	signature:() const
referenceCount	SharedPtr.h	/^  int referenceCount() const {$/;"	f	class:SharedPtr	access:public	signature:() const
referenceCount	SharedPtr.h	/^  int referenceCount() {$/;"	f	class:ReferenceCounter	access:public	signature:()
release	RefCountedObject.h	/^   void release() const;$/;"	p	class:RefCountedObject	access:public	signature:() const
release	RefCountedObject.h	/^inline void RefCountedObject::release() const {$/;"	f	class:RefCountedObject	signature:() const
release	SharedPtr.h	/^   static void release(C* pObj) {$/;"	f	class:ReleasePolicy	access:public	signature:(C* pObj)
release	SharedPtr.h	/^  int release() {$/;"	f	class:ReferenceCounter	access:public	signature:()
release	SharedPtr.h	/^  static void release(C* pObj) {$/;"	f	class:ReleaseArrayPolicy	access:public	signature:(C* pObj)
release	SharedPtr.h	/^  void release() {$/;"	f	class:SharedPtr	access:private	signature:()
removeObserver	NotificationCenter.cc	/^void NotificationCenter::removeObserver(const AbstractObserver& observer) {$/;"	f	class:NotificationCenter	signature:(const AbstractObserver& observer)
removeObserver	NotificationCenter.h	/^  void removeObserver(const AbstractObserver& observer);$/;"	p	class:NotificationCenter	access:public	signature:(const AbstractObserver& observer)
reset	SocketImpl.cc	/^void SocketImpl::reset(int fd) {$/;"	f	class:SocketImpl	signature:(int fd)
reset	SocketImpl.h	/^  void reset(int fd = -1);$/;"	p	class:SocketImpl	access:protected	signature:(int fd = -1)
resolution	Timestamp.h	/^  static TimeVal resolution();$/;"	p	class:Timestamp	access:public	signature:()
resolution	Timestamp.h	/^inline Timestamp::TimeVal Timestamp::resolution() {$/;"	f	class:Timestamp	signature:()
resolveService	SocketAddress.cc	/^uint16_t SocketAddress::resolveService(const std::string& service) {$/;"	f	class:SocketAddress	signature:(const std::string& service)
resolveService	SocketAddress.h	/^  uint16_t resolveService(const std::string& service);$/;"	p	class:SocketAddress	access:protected	signature:(const std::string& service)
rethrow	Exception.cc	/^void Exception::rethrow() const {$/;"	f	class:Exception	signature:() const
rethrow	Exception.h	/^  virtual void rethrow() const;$/;"	p	class:Exception	access:public	signature:() const
run	Runnable.h	/^  virtual void run() = 0;$/;"	p	class:Runnable	access:public	signature:()
seconds	Timespan.h	/^  int seconds() const;$/;"	p	class:Timespan	access:public	signature:() const
seconds	Timespan.h	/^inline int Timespan::seconds() const {$/;"	f	class:Timespan	signature:() const
select	Socket.cc	/^int Socket::select(SocketList& readList, SocketList& writeList,$/;"	f	class:Socket	signature:(SocketList& readList, SocketList& writeList, SocketList& exceptList, const Timespan& timeout)
select	Socket.h	/^  static int select(SocketList& readList, SocketList& writeList,$/;"	p	class:Socket	access:public	signature:(SocketList& readList, SocketList& writeList, SocketList& exceptList, const Timespan& timeout)
sendBytes	SocketImpl.cc	/^int SocketImpl::sendBytes(const void* buffer, int length,$/;"	f	class:SocketImpl	signature:(const void* buffer, int length, int flags)
sendBytes	SocketImpl.h	/^  virtual int sendBytes(const void* buffer, int length, int flags = 0);$/;"	p	class:SocketImpl	access:public	signature:(const void* buffer, int length, int flags = 0)
sendBytes	StreamSocketImpl.cc	/^int StreamSocketImpl::sendBytes(const void* buffer, int length,$/;"	f	class:StreamSocketImpl	signature:(const void* buffer, int length, int flags)
sendBytes	StreamSocketImpl.h	/^  virtual int sendBytes(const void* buffer, int length, int flags = 0);$/;"	p	class:StreamSocketImpl	access:public	signature:(const void* buffer, int length, int flags = 0)
sendTimeout_	SocketImpl.h	/^  Timespan sendTimeout_;$/;"	m	class:SocketImpl	access:private
sendTo	SocketImpl.cc	/^int SocketImpl::sendTo(const void* buffer, int length,$/;"	f	class:SocketImpl	signature:(const void* buffer, int length, const SocketAddress& address, int flags)
sendTo	SocketImpl.h	/^  virtual int sendTo(const void* buffer, int length,$/;"	p	class:SocketImpl	access:public	signature:(const void* buffer, int length, const SocketAddress& address, int flags = 0)
sendUrgent	SocketImpl.cc	/^void SocketImpl::sendUrgent(unsigned char data) {$/;"	f	class:SocketImpl	signature:(unsigned char data)
sendUrgent	SocketImpl.h	/^  virtual void sendUrgent(unsigned char data);$/;"	p	class:SocketImpl	access:public	signature:(unsigned char data)
setBlocking	Socket.h	/^  void setBlocking(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
setBlocking	Socket.h	/^inline void Socket::setBlocking(bool flag) {$/;"	f	class:Socket	signature:(bool flag)
setBlocking	SocketImpl.cc	/^void SocketImpl::setBlocking(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
setBlocking	SocketImpl.h	/^  virtual void setBlocking(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
setBroadcast	SocketImpl.cc	/^void SocketImpl::setBroadcast(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
setBroadcast	SocketImpl.h	/^  void setBroadcast(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
setKeepAlive	Socket.h	/^  void setKeepAlive(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
setKeepAlive	Socket.h	/^inline void Socket::setKeepAlive(bool flag) {$/;"	f	class:Socket	signature:(bool flag)
setKeepAlive	SocketImpl.cc	/^void SocketImpl::setKeepAlive(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
setKeepAlive	SocketImpl.h	/^  void setKeepAlive(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
setLinger	Socket.h	/^  void setLinger(bool on, int seconds);$/;"	p	class:Socket	access:public	signature:(bool on, int seconds)
setLinger	Socket.h	/^inline void Socket::setLinger(bool on, int seconds) {$/;"	f	class:Socket	signature:(bool on, int seconds)
setLinger	SocketImpl.cc	/^void SocketImpl::setLinger(bool on, int seconds) {$/;"	f	class:SocketImpl	signature:(bool on, int seconds)
setLinger	SocketImpl.h	/^  void setLinger(bool on, int seconds);$/;"	p	class:SocketImpl	access:public	signature:(bool on, int seconds)
setNoDelay	Socket.h	/^  void setNoDelay(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
setNoDelay	Socket.h	/^inline void Socket::setNoDelay(bool flag){$/;"	f	class:Socket	signature:(bool flag)
setNoDelay	SocketImpl.cc	/^void SocketImpl::setNoDelay(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
setNoDelay	SocketImpl.h	/^  void setNoDelay(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
setOOBInline	Socket.h	/^  void setOOBInline(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
setOOBInline	Socket.h	/^inline void Socket::setOOBInline(bool flag) {$/;"	f	class:Socket	signature:(bool flag)
setOOBInline	SocketImpl.cc	/^void SocketImpl::setOOBInline(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
setOOBInline	SocketImpl.h	/^  void setOOBInline(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
setOption	Socket.h	/^  void setOption(int level, int option, const IPAddress& value);$/;"	p	class:Socket	access:public	signature:(int level, int option, const IPAddress& value)
setOption	Socket.h	/^  void setOption(int level, int option, const Timespan& value);$/;"	p	class:Socket	access:public	signature:(int level, int option, const Timespan& value)
setOption	Socket.h	/^  void setOption(int level, int option, int value);$/;"	p	class:Socket	access:public	signature:(int level, int option, int value)
setOption	Socket.h	/^  void setOption(int level, int option, unsigned  value);$/;"	p	class:Socket	access:public	signature:(int level, int option, unsigned value)
setOption	Socket.h	/^  void setOption(int level, int option, unsigned char value);$/;"	p	class:Socket	access:public	signature:(int level, int option, unsigned char value)
setOption	Socket.h	/^inline void Socket::setOption(int level, int option, const IPAddress& value) {$/;"	f	class:Socket	signature:(int level, int option, const IPAddress& value)
setOption	Socket.h	/^inline void Socket::setOption(int level, int option, int value) {$/;"	f	class:Socket	signature:(int level, int option, int value)
setOption	Socket.h	/^inline void Socket::setOption(int level, int option, unsigned char value) {$/;"	f	class:Socket	signature:(int level, int option, unsigned char value)
setOption	Socket.h	/^inline void Socket::setOption(int level, int option, unsigned value) {$/;"	f	class:Socket	signature:(int level, int option, unsigned value)
setOption	Socket.h	/^inline void Socket::setOption(int level, int option,$/;"	f	class:Socket	signature:(int level, int option, const Timespan& value)
setOption	SocketImpl.cc	/^void SocketImpl::setOption(int level, int option, const IPAddress& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, const IPAddress& value)
setOption	SocketImpl.cc	/^void SocketImpl::setOption(int level, int option, const Timespan& value) {$/;"	f	class:SocketImpl	signature:(int level, int option, const Timespan& value)
setOption	SocketImpl.cc	/^void SocketImpl::setOption(int level, int option, int value) {$/;"	f	class:SocketImpl	signature:(int level, int option, int value)
setOption	SocketImpl.cc	/^void SocketImpl::setOption(int level, int option, unsigned char value) {$/;"	f	class:SocketImpl	signature:(int level, int option, unsigned char value)
setOption	SocketImpl.cc	/^void SocketImpl::setOption(int level, int option, unsigned value) {$/;"	f	class:SocketImpl	signature:(int level, int option, unsigned value)
setOption	SocketImpl.h	/^  void setOption(int level, int option, const IPAddress& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, const IPAddress& value)
setOption	SocketImpl.h	/^  void setOption(int level, int option, const Timespan& value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, const Timespan& value)
setOption	SocketImpl.h	/^  void setOption(int level, int option, int value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, int value)
setOption	SocketImpl.h	/^  void setOption(int level, int option, unsigned char value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, unsigned char value)
setOption	SocketImpl.h	/^  void setOption(int level, int option, unsigned value);$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, unsigned value)
setRawOption	SocketImpl.cc	/^void SocketImpl::setRawOption(int level, int option, const void* value,$/;"	f	class:SocketImpl	signature:(int level, int option, const void* value, socklen_t length)
setRawOption	SocketImpl.h	/^  virtual void setRawOption(int level, int option, const void* value,$/;"	p	class:SocketImpl	access:public	signature:(int level, int option, const void* value, socklen_t length)
setReceiveBufferSize	Socket.h	/^  void setReceiveBufferSize(int size);$/;"	p	class:Socket	access:public	signature:(int size)
setReceiveBufferSize	Socket.h	/^inline void Socket::setReceiveBufferSize(int size) {$/;"	f	class:Socket	signature:(int size)
setReceiveBufferSize	SocketImpl.cc	/^void SocketImpl::setReceiveBufferSize(int size) {$/;"	f	class:SocketImpl	signature:(int size)
setReceiveBufferSize	SocketImpl.h	/^  virtual void setReceiveBufferSize(int size);$/;"	p	class:SocketImpl	access:public	signature:(int size)
setReceiveTimeout	Socket.h	/^  void setReceiveTimeout(const Timespan& timeout);$/;"	p	class:Socket	access:public	signature:(const Timespan& timeout)
setReceiveTimeout	Socket.h	/^inline void Socket::setReceiveTimeout(const Timespan& timeout) {$/;"	f	class:Socket	signature:(const Timespan& timeout)
setReceiveTimeout	SocketImpl.cc	/^void SocketImpl::setReceiveTimeout(const Timespan& timeout)  {$/;"	f	class:SocketImpl	signature:(const Timespan& timeout)
setReceiveTimeout	SocketImpl.h	/^  virtual void setReceiveTimeout(const Timespan& timeout);$/;"	p	class:SocketImpl	access:public	signature:(const Timespan& timeout)
setReuseAddress	Socket.h	/^  void setReuseAddress(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
setReuseAddress	Socket.h	/^inline void Socket::setReuseAddress(bool flag) {$/;"	f	class:Socket	signature:(bool flag)
setReuseAddress	SocketImpl.cc	/^void SocketImpl::setReuseAddress(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
setReuseAddress	SocketImpl.h	/^  void setReuseAddress(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
setReusePort	Socket.h	/^  void setReusePort(bool flag);$/;"	p	class:Socket	access:public	signature:(bool flag)
setReusePort	Socket.h	/^inline void Socket::setReusePort(bool flag) {$/;"	f	class:Socket	signature:(bool flag)
setReusePort	SocketImpl.cc	/^void SocketImpl::setReusePort(bool flag) {$/;"	f	class:SocketImpl	signature:(bool flag)
setReusePort	SocketImpl.h	/^  void setReusePort(bool flag);$/;"	p	class:SocketImpl	access:public	signature:(bool flag)
setSendBufferSize	Socket.h	/^  void setSendBufferSize(int size);$/;"	p	class:Socket	access:public	signature:(int size)
setSendBufferSize	Socket.h	/^inline void Socket::setSendBufferSize(int size) {$/;"	f	class:Socket	signature:(int size)
setSendBufferSize	SocketImpl.cc	/^void SocketImpl::setSendBufferSize(int size) {$/;"	f	class:SocketImpl	signature:(int size)
setSendBufferSize	SocketImpl.h	/^  virtual void setSendBufferSize(int size);$/;"	p	class:SocketImpl	access:public	signature:(int size)
setSendTimeout	Socket.h	/^  void setSendTimeout(const Timespan& timeout);$/;"	p	class:Socket	access:public	signature:(const Timespan& timeout)
setSendTimeout	Socket.h	/^inline void Socket::setSendTimeout(const Timespan& timeout) {$/;"	f	class:Socket	signature:(const Timespan& timeout)
setSendTimeout	SocketImpl.cc	/^void SocketImpl::setSendTimeout(const Timespan& timeout) {$/;"	f	class:SocketImpl	signature:(const Timespan& timeout)
setSendTimeout	SocketImpl.h	/^  virtual void setSendTimeout(const Timespan& timeout);$/;"	p	class:SocketImpl	access:public	signature:(const Timespan& timeout)
setSocket	SocketNotification.cc	/^void SocketNotification::setSocket(const Socket& socket) {$/;"	f	class:SocketNotification	signature:(const Socket& socket)
setSocket	SocketNotification.h	/^  void setSocket(const Socket& socket);$/;"	p	class:SocketNotification	access:private	signature:(const Socket& socket)
shutdown	SocketImpl.cc	/^void SocketImpl::shutdown() {$/;"	f	class:SocketImpl	signature:()
shutdown	SocketImpl.h	/^  virtual void shutdown();$/;"	p	class:SocketImpl	access:public	signature:()
shutdownReceive	SocketImpl.cc	/^void SocketImpl::shutdownReceive() {$/;"	f	class:SocketImpl	signature:()
shutdownReceive	SocketImpl.h	/^  virtual void shutdownReceive();$/;"	p	class:SocketImpl	access:public	signature:()
shutdownSend	SocketImpl.cc	/^void SocketImpl::shutdownSend() {$/;"	f	class:SocketImpl	signature:()
shutdownSend	SocketImpl.h	/^  virtual void shutdownSend();$/;"	p	class:SocketImpl	access:public	signature:()
socket	SocketNotification.h	/^  Socket& socket();$/;"	p	class:SocketNotification	access:public	signature:()
socket	SocketNotification.h	/^inline Socket& SocketNotification::socket() {$/;"	f	class:SocketNotification	signature:()
socketError	SocketImpl.cc	/^int SocketImpl::socketError() {$/;"	f	class:SocketImpl	signature:()
socketError	SocketImpl.h	/^  int socketError();$/;"	p	class:SocketImpl	access:public	signature:()
socket_	SocketNotification.h	/^  Socket socket_;$/;"	m	class:SocketNotification	access:private
sockfd	Socket.h	/^  int sockfd() const;$/;"	p	class:Socket	access:protected	signature:() const
sockfd	Socket.h	/^inline int Socket::sockfd() const {$/;"	f	class:Socket	signature:() const
sockfd	SocketImpl.h	/^  int sockfd() const;$/;"	p	class:SocketImpl	access:public	signature:() const
sockfd	SocketImpl.h	/^inline int SocketImpl::sockfd() const{$/;"	f	class:SocketImpl	signature:() const
sockfd_	SocketImpl.h	/^  int sockfd_;$/;"	m	class:SocketImpl	access:private
source	SocketNotification.h	/^  SocketReactor& source();$/;"	p	class:SocketNotification	access:public	signature:()
source	SocketNotification.h	/^inline SocketReactor& SocketNotification::source() {$/;"	f	class:SocketNotification	signature:()
span_	Timespan.h	/^  TimeDiff span_;$/;"	m	class:Timespan	access:private
supportsIPv4	Socket.h	/^  static bool supportsIPv4();$/;"	p	class:Socket	access:public	signature:()
supportsIPv4	Socket.h	/^inline bool Socket::supportsIPv4() {$/;"	f	class:Socket	signature:()
supportsIPv6	Socket.h	/^  static bool supportsIPv6();$/;"	p	class:Socket	access:public	signature:()
swap	AutoPtr.h	/^  void swap(AutoPtr& ptr) {$/;"	f	class:AutoPtr	access:public	signature:(AutoPtr& ptr)
swap	AutoPtr.h	/^inline void swap(AutoPtr<C>& p1, AutoPtr<C>& p2) {$/;"	f	signature:(AutoPtr<C>& p1, AutoPtr<C>& p2)
swap	IPAddress.cc	/^void IPAddress::swap(IPAddress& address) {$/;"	f	class:IPAddress	signature:(IPAddress& address)
swap	IPAddress.h	/^  void swap(IPAddress& addr);$/;"	p	class:IPAddress	access:public	signature:(IPAddress& addr)
swap	IPAddress.h	/^inline void swap(IPAddress& addr1, IPAddress& addr2) {$/;"	f	signature:(IPAddress& addr1, IPAddress& addr2)
swap	SharedPtr.h	/^  void swap(SharedPtr& ptr) {$/;"	f	class:SharedPtr	access:public	signature:(SharedPtr& ptr)
swap	SocketAddress.cc	/^void SocketAddress::swap(SocketAddress& addr) {$/;"	f	class:SocketAddress	signature:(SocketAddress& addr)
swap	SocketAddress.h	/^  void swap(SocketAddress& addr);$/;"	p	class:SocketAddress	access:public	signature:(SocketAddress& addr)
swap	SocketAddress.h	/^inline void swap(SocketAddress& a1, SocketAddress& a2) {$/;"	f	signature:(SocketAddress& a1, SocketAddress& a2)
swap	Timespan.cc	/^void Timespan::swap(Timespan& timespan) {$/;"	f	class:Timespan	signature:(Timespan& timespan)
swap	Timespan.h	/^  void swap(Timespan& timespan);$/;"	p	class:Timespan	access:public	signature:(Timespan& timespan)
swap	Timespan.h	/^inline void swap(Timespan& s1, Timespan& s2) {$/;"	f	signature:(Timespan& s1, Timespan& s2)
swap	Timestamp.cc	/^void Timestamp::swap(Timestamp& timestamp) {$/;"	f	class:Timestamp	signature:(Timestamp& timestamp)
swap	Timestamp.h	/^  void swap(Timestamp& timestamp);$/;"	p	class:Timestamp	access:public	signature:(Timestamp& timestamp)
swap	Timestamp.h	/^inline void swap(Timestamp& s1, Timestamp& s2) {$/;"	f	signature:(Timestamp& s1, Timestamp& s2)
toString	IPAddress.cc	/^  std::string toString() const {$/;"	f	class:IPv4AddressImpl	access:public	signature:() const
toString	IPAddress.cc	/^  virtual std::string toString() const = 0;$/;"	p	class:IPAddressImpl	file:	access:public	signature:() const
toString	IPAddress.cc	/^std::string IPAddress::toString() const {$/;"	f	class:IPAddress	signature:() const
toString	IPAddress.h	/^  std::string toString() const;$/;"	p	class:IPAddress	access:public	signature:() const
toString	SocketAddress.cc	/^std::string SocketAddress::toString() const {$/;"	f	class:SocketAddress	signature:() const
toString	SocketAddress.h	/^  std::string toString() const;$/;"	p	class:SocketAddress	access:public	signature:() const
totalHours	Timespan.h	/^  int totalHours() const;$/;"	p	class:Timespan	access:public	signature:() const
totalHours	Timespan.h	/^inline int Timespan::totalHours() const {$/;"	f	class:Timespan	signature:() const
totalMicroseconds	Timespan.h	/^  TimeDiff totalMicroseconds() const;$/;"	p	class:Timespan	access:public	signature:() const
totalMicroseconds	Timespan.h	/^inline Timespan::TimeDiff Timespan::totalMicroseconds() const {$/;"	f	class:Timespan	signature:() const
totalMilliseconds	Timespan.h	/^  TimeDiff totalMilliseconds() const;$/;"	p	class:Timespan	access:public	signature:() const
totalMilliseconds	Timespan.h	/^inline Timespan::TimeDiff Timespan::totalMilliseconds() const {$/;"	f	class:Timespan	signature:() const
totalMinutes	Timespan.h	/^  int totalMinutes() const;$/;"	p	class:Timespan	access:public	signature:() const
totalMinutes	Timespan.h	/^inline int Timespan::totalMinutes() const {$/;"	f	class:Timespan	signature:() const
totalSeconds	Timespan.h	/^  int totalSeconds() const;$/;"	p	class:Timespan	access:public	signature:() const
totalSeconds	Timespan.h	/^inline int Timespan::totalSeconds() const {$/;"	f	class:Timespan	signature:() const
tryParse	IPAddress.cc	/^bool IPAddress::tryParse(const std::string& addr, IPAddress& result) {$/;"	f	class:IPAddress	signature:(const std::string& addr, IPAddress& result)
tryParse	IPAddress.h	/^  static bool tryParse(const std::string& addr, IPAddress& result);$/;"	p	class:IPAddress	access:public	signature:(const std::string& addr, IPAddress& result)
ts_	Timestamp.h	/^  TimeVal ts_;$/;"	m	class:Timestamp	access:private
unsafeCase	AutoPtr.h	/^  AutoPtr<Other> unsafeCase() const {$/;"	f	class:AutoPtr	access:public	signature:() const
unsafeCast	SharedPtr.h	/^  SharedPtr<Other, RC, RP> unsafeCast() const {$/;"	f	class:SharedPtr	access:public	signature:() const
update	Timestamp.cc	/^void Timestamp::update() {$/;"	f	class:Timestamp	signature:()
update	Timestamp.h	/^  void update();$/;"	p	class:Timestamp	access:public	signature:()
useconds	Timespan.h	/^  int useconds() const;$/;"	p	class:Timespan	access:public	signature:() const
useconds	Timespan.h	/^inline int Timespan::useconds() const  {$/;"	f	class:Timespan	signature:() const
utcTime	Timestamp.h	/^  UtcTimeVal utcTime() const;$/;"	p	class:Timestamp	access:public	signature:() const
utcTime	Timestamp.h	/^inline Timestamp::UtcTimeVal Timestamp::utcTime() const {$/;"	f	class:Timestamp	signature:() const
what	Exception.cc	/^const char* Exception::what() const throw(){$/;"	f	class:Exception	signature:() const
what	Exception.h	/^  virtual const char* what() const throw();$/;"	p	class:Exception	access:public	signature:() const
wildcard	IPAddress.cc	/^IPAddress IPAddress::wildcard(Family family) {$/;"	f	class:IPAddress	signature:(Family family)
wildcard	IPAddress.h	/^  static IPAddress wildcard(Family family = IPv4);$/;"	p	class:IPAddress	access:public	signature:(Family family = IPv4)
~AbstractObserver	AbstractObserver.cc	/^AbstractObserver::~AbstractObserver() {$/;"	f	class:AbstractObserver	signature:()
~AbstractObserver	AbstractObserver.h	/^  virtual ~AbstractObserver();$/;"	p	class:AbstractObserver	access:public	signature:()
~AutoPtr	AutoPtr.h	/^  ~AutoPtr() {$/;"	f	class:AutoPtr	access:public	signature:()
~ErrorNotification	SocketNotification.cc	/^ErrorNotification::~ErrorNotification() {$/;"	f	class:ErrorNotification	signature:()
~ErrorNotification	SocketNotification.h	/^  ~ErrorNotification();$/;"	p	class:ErrorNotification	access:public	signature:()
~Exception	Exception.cc	/^Exception::~Exception() throw (){$/;"	f	class:Exception	signature:()
~Exception	Exception.h	/^  ~Exception() throw();$/;"	p	class:Exception	access:public	signature:()
~IPAddress	IPAddress.cc	/^IPAddress::~IPAddress() {$/;"	f	class:IPAddress	signature:()
~IPAddress	IPAddress.h	/^  ~IPAddress();$/;"	p	class:IPAddress	access:public	signature:()
~IPAddressImpl	IPAddress.cc	/^  virtual ~IPAddressImpl() {$/;"	f	class:IPAddressImpl	access:protected	signature:()
~IdleNotification	SocketNotification.cc	/^IdleNotification::~IdleNotification() {$/;"	f	class:IdleNotification	signature:()
~IdleNotification	SocketNotification.h	/^  ~IdleNotification();$/;"	p	class:IdleNotification	access:public	signature:()
~Notification	Notification.cc	/^Notification::~Notification() {$/;"	f	class:Notification	signature:()
~Notification	Notification.h	/^  virtual ~Notification();$/;"	p	class:Notification	access:protected	signature:()
~NotificationCenter	NotificationCenter.cc	/^NotificationCenter::~NotificationCenter() {$/;"	f	class:NotificationCenter	signature:()
~NotificationCenter	NotificationCenter.h	/^  ~NotificationCenter();$/;"	p	class:NotificationCenter	access:public	signature:()
~Observer	Observer.h	/^  ~Observer() {$/;"	f	class:Observer	access:public	signature:()
~ReadableNotification	SocketNotification.cc	/^ReadableNotification::~ReadableNotification() {$/;"	f	class:ReadableNotification	signature:()
~ReadableNotification	SocketNotification.h	/^  ~ReadableNotification();$/;"	p	class:ReadableNotification	access:public	signature:()
~RefCountedObject	RefCountedObject.cc	/^RefCountedObject::~RefCountedObject() {$/;"	f	class:RefCountedObject	signature:()
~RefCountedObject	RefCountedObject.h	/^   virtual ~RefCountedObject();$/;"	p	class:RefCountedObject	access:protected	signature:()
~Runnable	Runnable.c	/^Runnable::~Runnable() {$/;"	f	class:Runnable
~Runnable	Runnable.h	/^  virtual ~Runnable();$/;"	p	class:Runnable	access:public	signature:()
~SharedPtr	SharedPtr.h	/^  ~SharedPtr() {$/;"	f	class:SharedPtr	access:public	signature:()
~ShutdownNotification	SocketNotification.cc	/^ShutdownNotification::~ShutdownNotification() {$/;"	f	class:ShutdownNotification	signature:()
~ShutdownNotification	SocketNotification.h	/^  ~ShutdownNotification();$/;"	p	class:ShutdownNotification	access:public	signature:()
~Socket	Socket.cc	/^Socket::~Socket() {$/;"	f	class:Socket	signature:()
~Socket	Socket.h	/^  virtual ~Socket();$/;"	p	class:Socket	access:public	signature:()
~SocketAddress	SocketAddress.cc	/^SocketAddress::~SocketAddress() {$/;"	f	class:SocketAddress	signature:()
~SocketAddress	SocketAddress.h	/^  ~SocketAddress();$/;"	p	class:SocketAddress	access:public	signature:()
~SocketAddressImpl	SocketAddress.cc	/^  ~SocketAddressImpl() {$/;"	f	class:SocketAddressImpl	access:protected	signature:()
~SocketImpl	SocketImpl.cc	/^SocketImpl::~SocketImpl() {$/;"	f	class:SocketImpl	signature:()
~SocketImpl	SocketImpl.h	/^  virtual ~SocketImpl();$/;"	p	class:SocketImpl	access:protected	signature:()
~SocketNotification	SocketNotification.cc	/^SocketNotification::~SocketNotification(){$/;"	f	class:SocketNotification	signature:()
~SocketNotification	SocketNotification.h	/^  virtual ~SocketNotification();$/;"	p	class:SocketNotification	access:public	signature:()
~StreamSocketImpl	StreamSocketImpl.cc	/^StreamSocketImpl::~StreamSocketImpl() {$/;"	f	class:StreamSocketImpl	signature:()
~StreamSocketImpl	StreamSocketImpl.h	/^  virtual ~StreamSocketImpl();$/;"	p	class:StreamSocketImpl	access:protected	signature:()
~TimeoutNotification	SocketNotification.cc	/^TimeoutNotification::~TimeoutNotification() {$/;"	f	class:TimeoutNotification	signature:()
~TimeoutNotification	SocketNotification.h	/^  ~TimeoutNotification();$/;"	p	class:TimeoutNotification	access:public	signature:()
~Timespan	Timespan.cc	/^Timespan::~Timespan() {$/;"	f	class:Timespan	signature:()
~Timespan	Timespan.h	/^  ~Timespan();$/;"	p	class:Timespan	access:public	signature:()
~Timestamp	Timestamp.cc	/^Timestamp::~Timestamp() {$/;"	f	class:Timestamp	signature:()
~Timestamp	Timestamp.h	/^  ~Timestamp();$/;"	p	class:Timestamp	access:public	signature:()
~WritableNotification	SocketNotification.cc	/^WritableNotification::~WritableNotification() {$/;"	f	class:WritableNotification	signature:()
~WritableNotification	SocketNotification.h	/^  ~WritableNotification();$/;"	p	class:WritableNotification	access:public	signature:()
